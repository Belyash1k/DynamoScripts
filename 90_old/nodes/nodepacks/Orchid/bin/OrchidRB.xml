<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrchidRB</name>
    </assembly>
    <members>
        <member name="M:Orchid.RevitProject.Common.Document.ImportImage(System.String,System.Boolean)">
            <summary>
            Import Image into document.
            </summary>
            <param name="path">Image path including file name and extension.</param>
            <param name="overwrite">Overwrite existing images?</param>
            <returns name="ImageType">ImageType.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Name(Orchid.RevitProject.Common.Document,System.Boolean)">
            <summary>
            Get the current document name.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
             <param name="withExtension">Include extension? default is set to false!</param>
            <returns name="string">The name of the document.</returns>
        </member>
        <member name="P:Orchid.RevitProject.Common.Document.Current">
            <summary>
            Get current document.
            </summary>
            <returns name="Document">Document as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ToString">
            <summary>
            Implement ToString() method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ToOrchidType(Autodesk.Revit.DB.Document)">
            <summary>
            Convert Autodesk Revit document to Orchid document.
            </summary>
            <param name="document">Document as Revit type.</param>
            <returns name="Document">Document as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ToOrchidType(Revit.Application.Document)">
            <summary>
            Convert Dynamo Revit document to Orchid document.
            </summary>
            <param name="document">Document as Dynamo type.</param>
            <returns name="Document">Document as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.BackgroundOpen(System.String)">
            <summary>
            Open documents in background.
            </summary>
            <param name="file">File (path) to open in the background.</param>
            <returns name="Document">Document as Revit type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.BackgroundOpen(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Open documents in background.
            </summary>
            <param name="file">File (path) to open in the background.</param>
            <param name="detachFromCentral">Detach from central?</param>
            <param name="discardWorksets">Discard worksets?</param>
            <param name="audit">Audit the document?</param>
            <returns name="Document">Document as Revit type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Close(Orchid.RevitProject.Common.Document,System.Boolean)">
            <summary>
            Close document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="save">Save opened document?</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Opened">
            <summary>
            Get background opened documents.
            </summary>
            <returns name="Document">Document as Revit type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Save(Orchid.RevitProject.Common.Document,System.Boolean)">
            <summary>
            Save document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="compact">Save using compact mode?</param>
            <returns name="Document">Document as Revit type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.SaveAs(Orchid.RevitProject.Common.Document,System.String,System.Boolean)">
            <summary>
            SaveAs document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="name">Name for the document incl. path.</param>
            <param name="overwrite">Overwrite existing document?</param>
            <returns name="Document">Document as Revit type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.SaveAs(Orchid.RevitProject.Common.Document,System.String,System.Boolean,System.Boolean)">
            <summary>
            SaveAs document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="name">Name for the document incl. path.</param>
            <param name="overwrite">Overwrite existing document?</param>
            <param name="saveAsCentral">SaveAs central document?</param>
            <returns name="Document">Document as Revit type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.LoadFamily(System.String)">
            <summary>
            Load family by file name, existing family will be overwritten.
            </summary>
            <param name="family">Path to the family file(s).</param>
            <returns name="Family">Family.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.LoadFamily(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Load family by file name into document, existing family will be overwritten.
            </summary>
            <param name="document">Path to the documents file(s).</param>
            <param name="family">Path to the family file(s).</param>
            <returns name="Family">Family.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.NewProject(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Create new project by name.
            </summary>
            <param name="file">File(s), must be new project file name(s) incl. path.</param>
            <param name="template">Project template(s) incl. path.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Directory(Orchid.RevitProject.Common.Document)">
            <summary>
            Get the directory of the Document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="string">The directory of the document.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Path(Orchid.RevitProject.Common.Document,System.Boolean)">
            <summary>
            Get the full path of the Document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="withExtension">Include extension? default is set to true!</param>
            <returns name="string">The full path of the document.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Unit(Orchid.RevitProject.Common.Document)">
            <summary>
            Get the display unit of the Document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="string">The display unit of the document.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Info(Orchid.RevitProject.Common.Document)">
            <summary>
            Get document info.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="info">Document info.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.EnableWorksharing(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Enable worksharing in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="name">Name for the user workset, if none is provided is the default name set.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.AllLevels(System.Boolean)">
            <summary>
            Get all levels in the current document.
            </summary>
            <param name="story">Get only Building Story levels?</param>
            <returns name="Level">The list of levels.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Purge(Orchid.RevitProject.Common.Document,System.Boolean)">
            ImportImage moved to exclusives, supporting individual versions of revit.
            <summary>
            Purge document. Set "completely" to true for including materials and assets!
            Note: "Completely" purges also materials and materials assets that are used
            in "peripheral" elements and settings. Among this is included materials/assets
            bound to imported model elements, and materials/assets in settings like "Site" etc.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="completely">Includes purging materials and assets.</param>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ProjectParameters(Orchid.RevitProject.Common.Document)">
            <summary>
            Get all project parameters in the document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Parameter">List of parameters.</returns>
            <returns name="Definition">List of definitions.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.GlobalParameters(Orchid.RevitProject.Common.Document)">
            <summary>
            Get all global parameters in the document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Parameter">List of parameters.</returns>
            <returns name="Definition">List of definitions.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.SharedParameters(Orchid.RevitProject.Common.Document)">
            <summary>
            Get all shared parameters in the document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Parameter">List of parameters.</returns>
            <returns name="Definition">List of definitions.</returns>
            <returns name="Guid">List of guids.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ContainCategory(System.Collections.IList)">
            <summary>
            Does document contain category?
            </summary>
            <param name="category">Category to validate is contained in the document.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ContainType(System.Collections.IList)">
            <summary>
            Does document contain type?
            </summary>
            <param name="type">Type to validate is contained in the document.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.CopyDraftingView(Orchid.RevitProject.Common.Document,Orchid.RevitProject.Common.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Copy drafting view from source document to target document
            If drafting view exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document of Revit type.</param>
            <param name="target">Target as Document of Revit type.</param>
            <param name="draftingView">Drafting view to copy.</param>
            <returns name="DraftingView">Copied drafting view.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.CopyElement(Orchid.RevitProject.Common.Document,Orchid.RevitProject.Common.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Copy element from source document to target document
            If element exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document of Revit type.</param>
            <param name="target">Target as Document of Revit type.</param>
            <param name="element">Element to copy.</param>
            <returns name="Element">Copied element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.CopySchedule(Orchid.RevitProject.Common.Document,Orchid.RevitProject.Common.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Copy schedule from source document to target document
            If schedule exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document of Revit type.</param>
            <param name="target">Target as Document of Revit type.</param>
            <param name="schedule">Schedule to copy.</param>
            <returns name="Schedule">Copied schedule.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.TransferByCategory(Orchid.RevitProject.Common.Document,Orchid.RevitProject.Common.Document,System.Object,System.Boolean)">
            <summary>
            Transfer project standards by category from source document to target document.
            If elements exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document of Revit type.</param>
            <param name="target">Target as Document of Revit type.</param>
            <param name="category">Category as string or object.</param>
            <param name="append">Append only new elements or add new duplicate elements?</param>
            <returns name="Element">Transfered element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.TransferByFamily(Orchid.RevitProject.Common.Document,Orchid.RevitProject.Common.Document,System.Object,System.Boolean)">
            <summary>
            Transfer Family from source document to target document.
            If Family members exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document of Revit type.</param>
            <param name="target">Target as Document of Revit type.</param>
            <param name="family">Family as string or object.</param>
            <param name="append">Append to Family members or add new duplicate Family?</param>
            <returns name="Family">Transfered family.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.TransferByElementType(Orchid.RevitProject.Common.Document,Orchid.RevitProject.Common.Document,System.Object,System.Boolean)">
            <summary>
            Transfer ElementType from source document to target document.
            If ElementType exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document of Revit type.</param>
            <param name="target">Target as Document of Revit type.</param>
            <param name="elementType">Type as string or object.</param>
            <param name="append">Append only new elements or add new duplicate elements?</param>
            <returns name="ElementType">Transfered element type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ActiveView(Orchid.RevitProject.Common.Document)">
            <summary>
            Get the active view in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="View">The active view as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.OpenView(Revit.Elements.Element)">
            <summary>
            Open view in the active document.
            </summary>
            <param name="view">View to open.</param>
            <returns name="View">New active view.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.SetStartingView(Orchid.RevitProject.Common.Document,Revit.Elements.Element)">
            <summary>
            Set the starting view in the document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="view">The view to set.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.GetStartingView(Orchid.RevitProject.Common.Document)">
            <summary>
            Get the starting view in the document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="View">View as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.All">
            <summary>
            Get all design option set in current project.
            </summary>
            <returns name="DesignOptionSet">Design option set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.All(Orchid.RevitProject.Common.Document)">
            <summary>
            Get all design option set in project.
            </summary>
            <param name="document">Document as Orchid document.</param>
            <returns name="DesignOptionSet">Design option set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.ByName(System.String)">
            <summary>
            Get design option by name in current document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="DesignOption">Design option as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.ByName(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get design option by name.
            </summary>
            <param name="document">Document as Orchid document.</param>
            <param name="name">Name as string value.</param>
            <returns name="DesignOptionSet">Design option set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.Get(Revit.Elements.Element)">
            <summary>
            Get design option by name in current document.
            </summary>
            <param name="designOption">Design option as Dynamo type.</param>
            <returns name="DesignOptionSet">Design option set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.AcceptPrimary(Revit.Elements.Element)">
            <summary>
            Accept primary design option in a design option set.
            </summary>
            <param name="designOptionSet">Design option set as Dynamo type.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.AcceptPrimary2(Revit.Elements.Element)">
            <summary>
            Accept primary design option in a design option set.
            </summary>
            <param name="designOptionSet">Design option set as Dynamo type.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.AcceptPrimary3(Revit.Elements.Element)">
            <summary>
            Accept primary design option in a design option set.
            </summary>
            <param name="designOptionSet">Design option set as Dynamo type.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.IFC.About">
            <summary>
            About using the IfxExport nodes.
            </summary>
            <returns name="watch">Add a watch node!</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.All">
            <summary>
            Get all design option in current project.
            </summary>
            <returns name="DesignOption">Design option as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.All(Orchid.RevitProject.Common.Document)">
            <summary>
            Get all design option in project.
            </summary>
            <param name="document">Document as Orchid document.</param>
            <returns name="DesignOption">Design option as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.ByName(System.String)">
            <summary>
            Get design option by name in current document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="DesignOption">Design option as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.ByName(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get design option by name.
            </summary>
            <param name="document">Document as Orchid document.</param>
            <param name="name">Name as string value.</param>
            <returns name="DesignOption">Design option as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.IsPrimary(Revit.Elements.Element)">
            <summary>
            Verify if design option is primary.
            </summary>
            <param name="designOption">Design option as Dynamo type.</param>
            <returns name="boolean">True if design option is primary.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.Element(Revit.Elements.Element)">
            <summary>
            Get element in a design option.
            </summary>
            <param name="designOption">Design option as Dynamo type.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.ConvertToLink(Orchid.RevitProject.Common.Document,Revit.Elements.Element)">
            <summary>
            Convert link instance to link type.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="instance">Link instance as Dynamo type.</param>
            <returns name="Link">Revit link element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Reload(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Reload external linked file in document.
            </summary>
            <param name="link">External link element as Dynamo type.</param>
            <returns name="Link">External link element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Repath(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            Repath external linked file in document.
            </summary>
            <param name="link">External link element as Dynamo type.</param>
            <param name="file">File (path) to set (repath).</param>
            <returns name="Link">External link element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Unload(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Unload external linked file in document.
            </summary>
            <param name="link">External link element as Dynamo type.</param>
            <returns name="Link">External link element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.CopyElement(Revit.Elements.Element,Orchid.RevitProject.Common.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Copy element from link element to target document
            If element exist will a duplicate be created!?
            </summary>
            <param name="instance">External link element as Dynamo type.</param>
            <param name="target">Target as Document of Revit type.</param>
            <param name="element">Element to copy.</param>
            <returns name="Element">Copied element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.SetLocation(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Update an linked instance location.
            </summary>
            <param name="instance">External link element as Dynamo type.</param>
            <param name="referencePoint">Reference point for the link.</param>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.SetRevitFile(Orchid.RevitProject.Common.Document,System.String,System.String,System.Boolean,Autodesk.DesignScript.Geometry.Point,System.String,System.Boolean)">
            <summary>
            Link external revit file in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="file">File (path) to link.</param>
            <param name="positioning">Link positioning.</param>
            <param name="atBasePoint">Link revit file at base point?</param>
            <param name="referencePoint">Reference point for the file.</param>
            <param name="attachmentType">Link attachment type.</param>
            <param name="relative">Link revit file relative?</param>
            <returns name="Instance">Link instance as Dynamo type.</returns>
             <returns name="Link">CAD link element as Dynamo type.</returns>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.SetCadFile(Orchid.RevitProject.Common.Document,System.String,System.String,System.String,System.String,Autodesk.DesignScript.Geometry.Point,System.Boolean,Revit.Elements.Element,System.Boolean,System.Boolean)">
            <summary>
            Link external cad file in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="file">File (path) to link.</param>
            <param name="positioning">Link positioning.</param>
            <param name="unit">Link unit.</param>
            <param name="colorMode">Link color mode.</param>
            <param name="referencePoint">Reference point for the file.</param>
            <param name="visibleLayersOnly">Link to the visible layers only?</param>
            <param name="view">Place the link at view (if orient to view is set to true).</param>
            <param name="orientToView">Orient the link to view?</param>
            <param name="thisViewOnly">Link to this view only?</param>
            <returns name="Instance">Link instance as Dynamo type.</returns>
            <returns name="Link">CAD link element as Dynamo type.</returns>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.SetCadFile(Orchid.RevitProject.Common.Document,System.String,Autodesk.DesignScript.Geometry.Point,System.Boolean,Revit.Elements.Element,System.Boolean,System.Boolean)">
            <summary>
            Link external cad file in document. 
            Defaults: positioning set to Origin, unit set to Default,
            colorMode set to Preserved!
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="file">File (path) to link.</param>
            <param name="referencePoint">Reference point for the file.</param>
            <param name="visibleLayersOnly">Link to the visible layers only?</param>
            <param name="view">Place the link at view (if orient to view is set to true).</param>
            <param name="orientToView">Orient the link to view?</param>
            <param name="thisViewOnly">Link to this view only?</param>
            <returns name="Instance">Link instance as Dynamo type.</returns>
            <returns name="Link">CAD link element as Dynamo type.</returns>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Document(Revit.Elements.Element)">
            <summary>
            Get copy monitored element in document.
            </summary>
            <param name="instance">External link element as Dynamo type.</param>
            <returns name="Document">Document as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Instance(Revit.Elements.Element)">
            <summary>
            Get link instance from link in document.
            </summary>
            <param name="link">External link element as Dynamo type.</param>
            <returns name="Instance">Link instance as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.GetLocation(Revit.Elements.Element)">
            <summary>
            Get copy monitored element in document.
            </summary>
            <param name="instance">External link element as Dynamo type.</param>
            <returns name="Point">Point.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.GetFile(Orchid.RevitProject.Common.Document)">
            <summary>
            Get external linked file in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Link">External link element as Dynamo type.</returns>
            <returns name="Type">External link type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.GetRevitFile(Orchid.RevitProject.Common.Document)">
            <summary>
            Get external linked revit file in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Link">Revit link element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.GetCadFile(Orchid.RevitProject.Common.Document)">
            <summary>
            Get external linked cad file in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Link">CAD link element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.All">
            <summary>
            Get current project locations.
            </summary>
            <returns name="Location">Project locations.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.All(Orchid.RevitProject.Common.Document)">
            <summary>
            Get project locations.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Location">Project locations.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.ByName(System.String)">
            <summary>
            Get project location by name in current document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="Location">Project location.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.ByName(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get project location by name.
            </summary>
            <param name="document">Document as Orchid document.</param>
            <param name="name">Name as string value.</param>
            <returns name="Location">Project location.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.Get">
            <summary>
            Get current project location.
            </summary>
            <returns name="Location">Project location.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.GetPoint(Revit.Elements.Element)">
            <summary>
            Get the point from a project location.
            </summary>
            <param name="location">Project location.</param>
            <returns name="Point">Point.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.GetVector(Revit.Elements.Element)">
            <summary>
            Get the vector from a project location.
            </summary>
            <param name="location">Project location.</param>
            <returns name="Vector">Vector.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.Set(Revit.Elements.Element)">
            <summary>
            Set project location.
            </summary>
            <param name="location">Project location.</param>
            <returns name="Location">Project location.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.GetProjectPosition(Revit.Elements.Element)">
            <summary>
            Get the project position by element.
            This is similar to the Revit command "Report Shared Coordinates". .
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="NorthSouth">North/South offset.</returns>
            <returns name="EastWest">East/West offset.</returns>
            <returns name="Elevation">Elevation according to ground level.</returns>
            <returns name="Angle">Angle from True North.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.SetProjectPosition(Revit.Elements.Element,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the project position by element.
            This is similar to the Revit command "Specify Coordinates at Point".
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="northSouth">North/South offset.</param>
            <param name="eastWest">East/West offset.</param>
            <param name="elevation">Elevation according to ground level.</param>
            <param name="angle">Angle from True North.</param>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.SetProjectPosition(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the project position.
            </summary>
            <param name="northSouth">North/South offset.</param>
            <param name="eastWest">East/West offset.</param>
            <param name="elevation">Elevation according to ground level.</param>
            <param name="angle">Angle from True North.</param>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.SiteLocation">
            <summary>
            Get the site location properties.
            </summary>
            <returns name="Latitude">The latitude of the site location.</returns>
            <returns name="Longitude">The longitude of the site location.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.PostCommand.AppDialogShowing(System.Object,Autodesk.Revit.UI.Events.DialogBoxShowingEventArgs)">
            The DialogBoxShowing event handler
        </member>
        <member name="M:Orchid.RevitProject.Common.PostCommand.Purge(System.Boolean)">
            <summary>
            Purge document using Post Command.
            Post commands can only take the current document to be run once. Re-run the
            graph to re-activate the post command. To get back the "Purge" window inside
            Revit, set the "activate" value to "false" and re-run the graph once more!
            </summary>
            <param name="activate">Set to true to activate! (and false to deactivate).</param>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.All">
            <summary>
            Get all revisions.
            </summary>
            <returns name="Revision">The list of revisions.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.DeleteAll">
            <summary>
            Delete all revisions.
            </summary>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.GetNumbering">
            <summary>
            Get revision numbering method.
            </summary>
            <returns name="Numbering">Revision numbering.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.SetNumbering(System.String)">
            <summary>
            Set revision numbering method.
            </summary>
            <param name="numbering">Revision numbering to set.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.Get(Revit.Elements.Revision)">
            <summary>
            Get revision data.
            </summary>
            <param name="revision">Revision as Dynamo type.</param>
            <returns name="Sequence">Sequence.</returns>
            <returns name="RevNumber">Revision number --> NaN if Revision Numbering is Per Sheet.</returns>
            <returns name="RevDate">Revision date.</returns>
            <returns name="Description">Revision description.</returns>
            <returns name="Issued">Issued.</returns>
            <returns name="IssuedTo">IssuedTo.</returns>
            <returns name="IssuedBy">IssuedBy.</returns>
            <returns name="Visibility">Revision visibility (show).</returns>
            <returns name="Numbering">Revision numbering type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.Set(Revit.Elements.Revision,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Set revision data.
            </summary>
            <param name="revision">Revision as Dynamo type.</param>
            <param name="revDate">Revision date.</param>
            <param name="description">Revision description.</param>
            <param name="issued">Issued.</param>
            <param name="issuedTo">IssuedTo.</param>
            <param name="issuedBy">IssuedBy.</param>
            <param name="visibility">Revision visibility (show).</param>
            <param name="numberType">Revision numbering type.</param>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.Create(System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Create a new revision by name.
            </summary>
            <param name="revDate">Revision date.</param>
            <param name="description">Revision description.</param>
            <param name="issued">Issuing status.</param>
            <param name="issuedTo">Issued to.</param>
            <param name="issuedBy">Issued by.</param>
            <param name="visibility">Revision visibility (show).</param>
            <param name="numberType">Revision numbering type.</param>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.Delete(Revit.Elements.Revision)">
            <summary>
            Delete revisions, in a document.
            Note: At least one revison must be present in the document!
            </summary>
            <param name="revision">Revision as Dynamo type.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.AddToSheet(Revit.Elements.Views.Sheet,Revit.Elements.Revision)">
            <summary>
            Add revision to sheet.
            </summary>
            <param name="sheet">Sheet as Dynamo type.</param>
            <param name="revision">Revision as Dynamo type.</param>
            <returns name="Sheet">Sheet as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.RemoveFromSheet(Revit.Elements.Views.Sheet,Revit.Elements.Revision)">
            <summary>
            Remove revision from sheet.
            </summary>
            <param name="sheet">Sheet as Dynamo type.</param>
            <param name="revision">Revision as Dynamo type.</param>
            <returns name="Sheet">Sheet as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.RevisionCloud.All">
            <summary>
            Get all revision clouds in the current document.
            </summary>
            <returns name="RevisionCloud">The list of revision clouds.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.RevisionCloud.Delete(Revit.Elements.RevisionCloud)">
            <summary>
            Delete revision cloud.
            </summary>
            <param name="revisionCloud">RevisionCloud as Dynamo type.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.RevisionCloud.DeleteAll">
            <summary>
            Delete all revision clouds.
            </summary>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="P:Orchid.RevitProject.Common.Workset.Name">
            <summary>
            Get workset name.
            </summary>
            <returns name="string">Name as string.</returns>
        </member>
        <member name="P:Orchid.RevitProject.Common.Workset.Id">
            <summary>
            Workset Id as integer.
            </summary>
            <returns name="integer">Id as integer value.</returns>
        </member>
        <member name="P:Orchid.RevitProject.Common.Workset.UniqueId">
            <summary>
            Workset UniqueId.
            </summary>
            <returns name="string">UniqueId as string.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.ToString">
            <summary>
            Implement ToString() method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.ToOrchidType(Autodesk.Revit.DB.Workset)">
            <summary>
            Convert Autodesk Revit workset to Orchid workset.
            </summary>
            <param name="workset">Workset as Revit type.</param>
            <returns name="Workset">Workset as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.Active">
            <summary>
            Get active workset in the current document.
            </summary>
            <returns name="Workset">Workset as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.All">
            <summary>
            Get all workset in the current document.
            </summary>
            <returns name="Workset">The list of workset.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.Create(System.String)">
            <summary>
            Create Workset by name.
            </summary>
            <param name="name">The name of the workset.</param>
            <returns name="Workset">Workset as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.ByName(System.String)">
            <summary>
            Get Workset by name.
            </summary>
            <param name="name">The name of the workset.</param>
            <returns name="Workset">Workset as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.ById(System.Int32)">
            <summary>
            Get Workset by Id.
            </summary>
            <param name="id">Id as integer value.</param>
            <returns name="Workset">Workset as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.Schedule.GetSetField(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ScheduleField,System.Double)">
            <summary>
            Check if ScheduleField is undefined using UnitType (to Revit 2020) or ForgeTypeId (after Revit 2020).
            </summary>
            <param name="document"></param>
            <param name="field">ScheduleField.</param>
            <param name="accuracy"></param>
            <returns></returns>
        </member>
        <member name="P:Orchid.RevitProject.Schedules.Schedule.All">
            <summary>
            Get all schedules.
            </summary>
            <returns name="View">All schedule views as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.Schedule.GetData(Revit.Elements.Views.ScheduleView,System.String)">
            <summary>
            Get schedule view, data is being returned as set in the schedule.
            return value as integer, double and/or string
            according to the selected culture (Country).
            </summary>
            <param name="scheduleView">Schedule as Dynamo type.</param>
            <param name="country">Country as string.</param>
            <returns name="Data">All Date in the schedule as a list.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.Schedule.GetData(Revit.Elements.Views.ScheduleView,System.String,System.Double)">
            <summary>
            Get schedule view, data is being returned without unit symbols.
            Return value as integer, double and/or string
            according to the selected culture (Country).
            </summary>
            <param name="scheduleView">Schedule as Dynamo type.</param>
            <param name="country">Culture (country) as string.</param>
            <param name="accuracy">Accuracy for numeric values.</param>
            <returns name="Data">All data in the schedule as a list.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.Schedule.SortingGrouping(Revit.Elements.Views.ScheduleView,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Boolean},System.String,System.String,System.Boolean)">
            Filter
            <summary>
            Add Sorting/Grouping to the schedule table by name.
            </summary>
            <param name="scheduleView">Schedule as Dynamo type.</param>
            <param name="name">Name of the ScheduleField to use for sorting/grouping.</param>
            <param name="sortOrder">ScheduleSortOrder order.</param>
            <param name="header">Add header to the table?</param>
            <param name="footer">Select ScheduleFooter for the table.</param>
            <param name="blankLine">Add blank line to the section?</param>
            <param name="grandTotals">Select GrandTotals for the schedule.</param>
            <param name="customTitle">Custom title for grand totals.</param>
            <param name="itemize">Add itemize every instance?</param>
            <returns name="ScheduleView">Schedule as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.Schedule.Formatting(Revit.Elements.Views.ScheduleView,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Double)">
            <summary>
            Set field Formatting in the the schedule table by name.
            </summary>
            <param name="scheduleView">Schedule as Dynamo type.</param>
            <param name="name">Name of the ScheduleField to format.</param>
            <param name="columnHeading">Column title for the field.</param>
            <param name="headingOrientation">Heading orientation for the field.</param>
            <param name="horizontalAlignment">Horizontal alignment for the field.</param>
            <param name="hidden">Hide field?</param>
            <param name="calculate">Calculate field values if calculable.</param>
            <param name="columnWidth">Set the column width for the field.</param>
            <returns name="ScheduleView">Schedule as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.SchedulableField.ByName(System.Collections.IEnumerable,System.String)">
            <summary>
            Get SchedulableField by name (parameter name).
            </summary>
            <param name="schedulableField">List of SchedulableField as Dynamo type.</param>
            <param name="name">Name of the parameter to use as the SchedulableField.</param>
            <returns name="SchedulableField">SchedulableField as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Sweep.All">
            <summary>
            Get all sweep in current document.
            </summary>
            <returns name="Sweep">Sweep as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.AllCategories(Autodesk.Revit.DB.Document)">
            <summary>
            Get a CategorySet for all categories.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.ToCategorySet(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Convert a list of categories to a category set.
            </summary>
            <param name="document"></param>
            <param name="categoryList"></param>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.ToRevitType(Revit.Elements.Category)">
            <summary>
            Convert Dynamo Revit category to Autodesk Revit category.
            </summary>
            <param name="category">Category as Dynamo type.</param>
            <returns name="Category">Category as Revit type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.ToDynamoType(Autodesk.Revit.DB.Category)">
            <summary>
            Convert Autodesk Revit category to Dynamo Revit category.
            </summary>
            <param name="category">Category as Revit type.</param>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.BuiltInCategory">
            <summary>
            Get all built in categories.
            </summary>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.ByCategoryType(System.String)">
            <summary>
            Get all categories by category type.
            </summary>
            <param name="categoryType">CategoryType as string.</param>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.CategoryType(System.Object)">
            <summary>
            Get the category type.
            </summary>
            <param name="category">Category as Dynamo type.</param>
            <returns name="CategoryType">CategoryType as string.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.InDocument(Orchid.RevitProject.Common.Document)">
            <summary>
            Get all categories in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.Architectural(System.Boolean)">
            <summary>
            Get architectural categories in current document. 
            Note: Does only include first level categories in the architectural category tree.
            </summary>
            <param name="instance">Choose if type (T) or instance (F) parameter is needed!?</param>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.Structural(System.Boolean)">
            <summary>
            Get structural categories in current document
            Note: Does only include first level categories in the structural category tree.
            </summary>
            <param name="instance">Choose if type (T) or instance (F) parameter is needed!?</param>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.Mechanical(System.Boolean)">
            <summary>
            Get mechanical categories in current document
            Note: Does only include first level categories in the mechanical category tree.
            </summary>
            <param name="instance">Choose if type (T) or instance (F) parameter is needed!?</param>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.Electrical(System.Boolean)">
            <summary>
            Get electrical categories in current document
            Note: Does only include first level categories in the electrical category tree.
            </summary>
            <param name="instance">Choose if type (T) or instance (F) parameter is needed!?</param>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.Piping(System.Boolean)">
            <summary>
            Get piping categories in current document
            Note: Does only include first level categories in the piping category tree.
            </summary>
            <param name="instance">Choose if type (T) or instance (F) parameter is needed!?</param>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.CurtainPanel.All">
            <summary>
            All curtain wall panel in current document.
            </summary>
            <returns name="Element">Curtain panel element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.CurtainPanel.FamilyInstances">
            <summary>
            All curtain wall panel of family type in current document.
            </summary>
            <returns name="Element">FamilyInstance element as Dynamo type.</returns>
            <returns name="Category">FamilyInstance element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.CurtainPanel.Doors">
            <summary>
            All curtain wall panel of door type in current document.
            </summary>
            <returns name="Element">Door element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.CurtainPanel.Windows">
            <summary>
            All curtain wall panel of window type in current document.
            </summary>
            <returns name="Element">Window element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.CurtainPanel.Walls">
            <summary>
            All curtain wall panel of wall type in current document.
            </summary>
            <returns name="Element">FamilyInstance element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ById(System.Int32)">
            <summary>
            Get element by id in current document.
            </summary>
            <param name="id">Id as integer value.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ById(Orchid.RevitProject.Common.Document,System.Int32)">
            <summary>
            Get element by id.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="id">Id as integer value.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ByName(System.String)">
            <summary>
            Get element by name in current document.
            </summary>
            <param name="name">Name as string.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ByName(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get element by name.
            </summary>
            <param name="document">Document as Orchid document.</param>
            <param name="name">Name as string.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.NameById(System.Int32)">
            <summary>
            Get element name by id as integer value.
            </summary>
            <param name="id">Integer value for the element.</param>
            <returns name="string">string.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.FamilyName(Revit.Elements.Element)">
            <summary>
            Get element family name.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="string">Family name as string.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ToRevitType(Revit.Elements.Element)">
            <summary>
            Convert Dynamo Revit element to Autodesk Revit element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Element">Element as Revit type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ToDynamoType(Autodesk.Revit.DB.Element)">
            <summary>
            Convert Autodesk Revit element to Dynamo Revit element.
            </summary>
            <param name="element">Element as Revit type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.TypeOf(System.Collections.IEnumerable,System.Type)">
            <summary>
            Returns the Dynamo internal element if it is by the input Audodesk.Revit type.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="type">Type as System.RuntimeType.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Info(Orchid.RevitProject.Common.Document,Revit.Elements.Element)">
            <summary>
            Get element info.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Owner">Owner.</returns>
            <returns name="Creator">Creator.</returns>
            <returns name="LastChangedBy">LastChangedBy.</returns>
            <returns name="RequestedBy">RequestedBy.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ByCategory(System.Object)">
            <summary>
            Get all element by category.
            </summary>
            <param name="category">Category as string or Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ElementType(Orchid.RevitProject.Common.Document,Revit.Elements.Element)">
            <summary>
            Returns the ElementType for this Element. Returns null if the Element cannot have a ElementType assigned.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="element">Element as Dynamo type.</param>
            <returns name="ElementType">Element Type or Null.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.GetLinePattern">
            <summary>
            Get line pattern element.
            </summary>
            <returns name="Element">Element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.HasLocation(Revit.Elements.Element)">
            <summary>
            Verify if element has location.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="boolean">True if element has location.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Solid(Revit.Elements.Element)">
            <summary>
            Get Dynamo solid from Revit solid and void geometry.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Solid">Solid element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.OcSolid(Revit.Elements.Element)">
            <summary>
            Get Orchid solid element from Revit solid and void geometry.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="OcSolid">Solid element as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ElementIntersect(Revit.Elements.Element)">
            <summary>
            Get intersecting element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ElementIntersect(Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get intersecting element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="elements">Elements to examine.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.CategoryIntersect(Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Category})">
            <summary>
            Get intersecting element. Output is filtered if category is provided.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="category">Category as Dynamo type, default is set to all catgories in document.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.HasIntersect(Revit.Elements.Element)">
            <summary>
            Verify if element has intersecting element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.HasIntersect(Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Verify if element has intersecting element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="elements">Elements to examine.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.CopyToLocation(System.Collections.Generic.List{Revit.Elements.Element},Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Copy element to location by vector.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="vector">Translation vector.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.CopyToLocation(System.Collections.Generic.List{Revit.Elements.Element},Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Copy element to location by point.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="point">Translation point.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.CopyToLevel(System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Level)">
            <summary>
            Copy element by level (translation).
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="level">Translation vector.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Move(System.Collections.Generic.List{Revit.Elements.Element},Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Move Revit Element by Vector.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="vector">Translation vector.</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Move(System.Collections.Generic.List{Revit.Elements.Element},Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Move Revit Element by point.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="point">Translation point.</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsVisibleInView(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Verify if element is visible in view.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="view">View as Dynamo type.</param>
            <returns name="boolean">Whether element is visible in view or not.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.OwnerView(Revit.Elements.Element)">
            <summary>
            Get the view where the element is located.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="View">View as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.OwnerViewType(Revit.Elements.Element)">
            <summary>
            Get the view where the element is located as string.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="ViewType">ViewType as string.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsPinned(Revit.Elements.Element)">
            <summary>
            Verify if element is pinned.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="boolean">True if element is pinned.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Pin(Revit.Elements.Element)">
            <summary>
            Pin element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Pin(Orchid.RevitProject.Common.Document,Revit.Elements.Element)">
            <summary>
            Pin element.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.UnPin(Revit.Elements.Element)">
            <summary>
            UnPin element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.UnPin(Orchid.RevitProject.Common.Document,Revit.Elements.Element)">
            <summary>
            UnPin element.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsValid(Revit.Elements.Element)">
            <summary>
            Verify if element is valid, output as boolean
            If element is deleted during processing is this filter valuable.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Valid(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Filter list for valid elements.
            If element is deleted during processing is this filter valuable.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.PhaseByName(System.String)">
            <summary>
            Get phase by name.
            </summary>
            <param name="name">Phase name as string.</param>
            <returns name="Phase">Phase as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.GetPhase(Revit.Elements.Element)">
            <summary>
            Get the phase of the element. 
            Note: An element that might be collected could be temporarily created by Revit
            to handle phasing. These elements should not be used in data processing, they
            should be left to Revit to handle!
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Created">Phase created.</returns>
            <returns name="Demolished">Phase demolished.</returns>
            <returns name="Temporary">Temporary phasing element handled by Revit.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.SetPhase(System.Collections.Generic.IList{Revit.Elements.Element},Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Set the phase of the element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="created">Phase created as Dynamo type.</param>
            <param name="demolished">Phase demolished as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.SetWorkset(Revit.Elements.Element,Orchid.RevitProject.Common.Workset)">
            <summary>
            Set the workset of the element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="workset">Workset as Orchid type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.GetWorkset(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get the workset of the element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="UserWorkset">If UserWorkset is set to true, then only UserWorkset will be collected!</param>
            <returns name="Workset">Workset as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.GetDesignOption(Revit.Elements.Element)">
            <summary>
            Get the element design option, null value is returned if element belong to main model.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="DesignOption">Design option as Dynamo type, null if element belong to main model.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.HasDesignOption(Revit.Elements.Element)">
            <summary>
            Verify if element belong to a design option.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="boolean">Boolean value if element belong to a design option.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.CopyMonitorInstance(Revit.Elements.Element)">
            <summary>
            Get copy/monitor link instance.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Instance">Link instance as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsCopyMonitored(Revit.Elements.Element)">
            <summary>
            Determines if element is copy/monitored.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="boolean">Boolean value if element is copy/monitored.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Delete(Revit.Elements.Element)">
            <summary>
            Delete elements. 
            Note: If a wall element is a member of a stacked wall, will this
            element lead to the entire stacked wall will be deleted.
            The other stacked wall members will return false.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="boolean">Boolean value if element is deleted (if element existed).</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Delete(Orchid.RevitProject.Common.Document,Revit.Elements.Element)">
            <summary>
            Delete elements, in a document.
            Note: If a wall element is a member of a stacked wall, will this
            element lead to the entire stacked wall will be deleted.
            The other stacked wall members will return false.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="element">Element as Dynamo type.</param>
            <returns name="boolean">Boolean value if element is deleted (if element existed).</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.Name(Revit.Elements.Element)">
            <summary>
            Get element type name.
            </summary>
            <param name="elementType">Element as Dynamo type.</param>
            <returns name="string">Name as string.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.ByName(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get element type by name in document.
            </summary>
            <param name="document">Document as Orchid document.</param>
            <param name="name">Name as string.</param>
            <returns name="ElementType">ElementType as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.ByCategory(System.Object)">
            <summary>
            Get all element types by category.
            </summary>
            <param name="category">Category as string or Dynamo type.</param>
            <returns name="ElementType">Element type as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.FamilyName(Revit.Elements.Element)">
            <summary>
            Get element type family name.
            </summary>
            <param name="elementType">Element as Dynamo type.</param>
            <returns name="string">Family name as string.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate the element type.
            </summary>
            <param name="elementType">ElementType as Dynamo type.</param>
            <param name="name">Name for the duplicated element type.</param>
            <returns name="ElementType">ElementType.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.All">
            <summary>
            Get all family in current document.
            </summary>
            <returns name="Family">Family.</returns>
            <returns name="Category">Category.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.ByName(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get family by name in document.
            </summary>
            <param name="document">Document as Orchid document.</param>
            <param name="name">Name as string.</param>
            <returns name="Family">Family as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.ByCategory(System.Object)">
            <summary>
            Get all family by category.
            </summary>
            <param name="category">Category as string or Dynamo type.</param>
            <returns name="Family">Family as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.Edit(System.Collections.Generic.List{Revit.Elements.Family})">
            <summary>
            Edit family document.
            </summary>
            <param name="family">List of families as Dynamo type.</param>
            <returns name="Document">Document as Revit type.</returns>
            <search>FamilyDocument,Family,Document,Open,RevitFamily</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.Load(Revit.Elements.Family)">
            <summary>
            Load family, existing family will be overwritten.
            </summary>
            <param name="family">Family as Dynamo type.</param>
            <returns name="Family">Family.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.Load(Orchid.RevitProject.Common.Document)">
            <summary>
            Load family as document, existing family will be overwritten.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="Family">Family.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.Save(System.Collections.Generic.List{Revit.Elements.Family},System.String,System.Boolean,System.Boolean)">
            <summary>
            Save family as file to path.
            </summary>
            <param name="family">Family to be saved.</param>
            <param name="path">Path to save file(s).</param>
            <param name="subfolder">Create subfolder by category?</param>
            <param name="overwrite">Overwrite existing families?</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.HasAssociated(Revit.Elements.Family)">
            <summary>
            Verify if family has associated elements.
            </summary>
            <param name="family">Family as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.HasSpatialCalculationPoint(Revit.Elements.Family)">
            <summary>
            Verify if family has spatial calculation point.
            </summary>
            <param name="family">Family as Dynamo type.</param>
            <returns name="boolean">True if element has spatial calculation point.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.IsHandFlipped(Revit.Elements.FamilyInstance)">
            <summary>
            Get the family instance hand flip condition, output as boolean.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.IsFaceFlipped(Revit.Elements.FamilyInstance)">
            <summary>
            Get the family instance face flip condition, output as boolean.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.HandFlipped(System.Collections.Generic.List{Revit.Elements.FamilyInstance})">
            <summary>
            Get the family instance hand flip condition, output as element.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="true">Flipped element.</returns>
            <returns name="false">Not flipped element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.FaceFlipped(System.Collections.Generic.List{Revit.Elements.FamilyInstance})">
            <summary>
            Get the family instance face flip condition, output as element.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="true">Flipped element.</returns>
            <returns name="false">Not flipped element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.HandOrientation(Revit.Elements.FamilyInstance)">
            <summary>
            Get the family instance hand orientation, output as vector.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="Vector">Vector.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.HasSpatialCalculationPoint(Revit.Elements.FamilyInstance)">
            <summary>
            Verify if family instance has spatial calculation point.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="boolean">True if element has spatial calculation point.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.HasFromToCalculationPoints(Revit.Elements.FamilyInstance)">
            <summary>
            Verify if family instance has spatial from/to calculation point.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="boolean">True if element has spatial from/to calculation point.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.GetSpatialCalculationPoint(Revit.Elements.FamilyInstance)">
            <summary>
            Get family instance spatial calculation point. .
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="Point">Point as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.GetFromToCalculationPoints(Revit.Elements.FamilyInstance)">
            <summary>
            Get family instance spatial from/to calculation point. 
            First point given is the "from" location, last point given is the "to" location.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="Point">Points as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.ByHostAndPoint(Revit.Elements.Element,Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Create family instance by host, family type and point.
            </summary>
            <param name="host">Hosting element as Dynamo type.</param>
            <param name="familyType">FamilyType as Dynamo type.</param>
            <param name="point">Point as Dynamo type.</param>
            <returns name="FamilyInstance">FamilyInstance as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.SetType(Revit.Elements.FamilyInstance,Revit.Elements.FamilyType)">
            <summary>
            Set family instance by family type.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <param name="familyType">FamilyType as Dynamo type.</param>
            <returns name="FamilyInstance">FamilyInstance as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.All">
            <summary>
            Get all family types in current document.
            </summary>
            <returns name="FamilyType">FamilyType as Dynamo type.</returns>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.ByName(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get family by name in document.
            </summary>
            <param name="document">Document as Orchid document.</param>
            <param name="name">Name as string.</param>
            <returns name="FamilyType">FamilyType as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.ByCategory(System.Object)">
            <summary>
            Get all family types by category.
            </summary>
            <param name="category">Category as string or Dynamo type.</param>
            <returns name="FamilyType">Family type as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.Edit(System.Collections.Generic.List{Revit.Elements.FamilyType})">
            <summary>
            Edit family document by family type.
            </summary>
            <param name="familyType">FamilyType as Dynamo type.</param>
            <returns name="Document">Document as Revit type.</returns>
            <search>FamilyDocument,Family,Document,Open,RevitFamily</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.HasAssociated(Revit.Elements.FamilyType)">
            <summary>
            Verify if family type has associated elements.
            </summary>
            <param name="familyType">FamilyType as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Filter.ByName(System.Collections.Generic.IEnumerable{Revit.Elements.Element},System.String,System.String)">
            <summary>
            Filter elements by name.
            </summary>
            <param name="element">List of elements as Dynamo type.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="value">Name value to filter by.</param>
            <returns name="Element">Element as Dynamo type.</returns>
            <search>Filter,ElementFilter</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Filter.ByCategory(System.Collections.Generic.IEnumerable{Revit.Elements.Element},System.String,System.Object)">
            <summary>
            Filter elements by category, as string or Dynamo type.
            </summary>
            <param name="element">List of elements as Dynamo type.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="value">Category to filter.</param>
            <returns name="Element">Element as Dynamo type.</returns>
            <search>Filter,ElementFilter</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Filter.ByParameter(System.Collections.Generic.IEnumerable{Revit.Elements.Element},System.String,System.String,System.Object)">
            <summary>
            Filter elements by parameter.
            </summary>
            <param name="element">List of elements as Dynamo type.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="parameterName">Parameter name to filter.</param>
            <param name="value">Value to filter by.</param>
            <returns name="Element">Element as Dynamo type.</returns>
            <search>Filter,ElementFilter</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FloorType.IsFoundationSlab(Revit.Elements.Element)">
            <summary>
            Verify if floor is foundation slab.
            </summary>
            <param name="FloorType">The floor type type as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FloorType.StructuralMaterial(Revit.Elements.Element)">
            <summary>
            Get the floor type structural material.
            </summary>
            <param name="FloorType">The floor type type as Dynamo type.</param>
            <returns name="Material">The floor structural material.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Create(System.String,System.Collections.Generic.List{Revit.Elements.Element},System.Boolean)">
            <summary>
            Create group by name. 
            Note: The boolean value "filter", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="name">Group name as string.</param>
            <param name="element">Element as Dynamo type.</param>
            <param name="filter">True value does NOT include elements placed on legend or drafting view!</param>
            <returns name="Group">Group as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.All(System.Boolean)">
            <summary>
            All group in current document.
            Note: The boolean value "filter", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="filter">True value does NOT include elements placed on legend or drafting view!</param>
            <returns name="Group">Group as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.All(Orchid.RevitProject.Common.Document,System.Boolean)">
            <summary>
            All group in document.
            Note: The boolean value "filter", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="filter">True value does NOT include elements placed on legend or drafting view!</param>
            <returns name="Group">Group as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.AllModel">
            <summary>
            All model group in current document.
            </summary>
            <returns name="Group">Group as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.AllDetail(System.Boolean)">
            <summary>
            All detail group in current document.
            Note: The boolean value "filter", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="filter">True value does NOT include elements placed on legend or drafting view!</param>
            <returns name="Group">Group as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.HasNestedGroup(Revit.Elements.Element)">
            <summary>
            Has nested group in group.
            </summary>
            <param name="group">Group as Dynamo type.</param>
            <returns name="boolean">True if group has nested group.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.GetNestedGroup(Revit.Elements.Element)">
            <summary>
            Get nested group in group.
            </summary>
            <param name="group">Group as Dynamo type.</param>
            <returns name="Group">Group as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.HasNestedElement(Revit.Elements.Element)">
            <summary>
            Has nested element in group, detaling elements is excluded!
            </summary>
            <param name="group">Group as Dynamo type.</param>
            <returns name="boolean">True if group has nested element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.GetNestedElement(Revit.Elements.Element)">
            <summary>
            Get nested Element in group, detaling elements is excluded!
            </summary>
            <param name="group">Group as Dynamo type.</param>
            <returns name="Element">Element type as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.GetByName(System.String)">
            <summary>
            Get group by name.
            </summary>
            <param name="name">Group name as string.</param>
            <returns name="Group">Group as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.GetByGroupType(Revit.Elements.Element)">
            <summary>
            Get group by group type.
            </summary>
            <param name="groupType">GroupType as Dynamo type.</param>
            <returns name="Group">Group as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.GetElement(Revit.Elements.Element)">
            <summary>
            Get placed element (group) by group.
            </summary>
            <param name="group">Group as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.UnGroup(System.String)">
            <summary>
            Ungroup by name.
            </summary>
            <param name="name">Group name as string.</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.UnGroup(Revit.Elements.Element)">
            <summary>
            Ungroup group.
            </summary>
            <param name="group">Group as Dynamo type.</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Delete(System.String)">
            <summary>
            Delete group by name.
            </summary>
            <param name="name">Group name as string.</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Delete(Revit.Elements.Element)">
            <summary>
            Delete group.
            </summary>
            <param name="group">Group as Dynamo type.</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.All">
            <summary>
            All group type in current document.
            </summary>
            <returns name="GroupType">GroupType as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.All(Orchid.RevitProject.Common.Document)">
            <summary>
            All group type in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="GroupType">GroupType as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.AllModel">
            <summary>
            All model group type in current document.
            </summary>
            <returns name="Group">Group as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.AllDetail">
            <summary>
            All detail group type in current document.
            </summary>
            <returns name="Group">Group as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.HasNestedGroup(Revit.Elements.Element)">
            <summary>
            Has nested group in group type.
            </summary>
            <param name="groupType">Group type as Dynamo type.</param>
            <returns name="boolean">True if group type has nested group.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.GetNestedGroup(Revit.Elements.Element)">
            <summary>
            Get nested group in group type.
            </summary>
            <param name="groupType">Group type as Dynamo type.</param>
            <returns name="GroupType">Group type as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.HasNestedElement(Revit.Elements.Element)">
            <summary>
            Has nested element in group type, detaling elements is excluded!
            </summary>
            <param name="groupType">Group type as Dynamo type.</param>
            <returns name="boolean">True if group type has nested element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.GetNestedElement(Revit.Elements.Element)">
            <summary>
            Get nested element in group type, detaling elements is excluded!
            </summary>
            <param name="groupType">Group type as Dynamo type.</param>
            <returns name="Element">Element type as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.GetByName(System.String)">
            <summary>
            Get group type by name.
            </summary>
            <param name="name">Group name as string.</param>
            <returns name="GroupType">GroupType as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.GetByGroup(Revit.Elements.Element)">
            <summary>
            Get group type by group.
            </summary>
            <param name="group">Group as Dynamo type.</param>
            <returns name="GroupType">GroupType as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.GetElement(Revit.Elements.Element)">
            <summary>
            Get placed element (group) by group type.
            </summary>
            <param name="groupType">Group type as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.Place(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Place a group by group type. .
            </summary>
            <param name="groupType">Group type as Dynamo type.</param>
            <param name="point">Point.</param>
            <returns name="Group">Group as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.Delete(System.String)">
            <summary>
            Delete group type by name.
            </summary>
            <param name="name">GroupType name as string.</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.Delete(Revit.Elements.Element)">
            <summary>
            Delete group type.
            </summary>
            <param name="groupType">GroupType as Dynamo type.</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.Quantity(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get material by element, return values in SI unit (m2/m3).
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Material">List of material.</returns>
            <returns name="area">List of area.</returns>
            <returns name="volumne">List of volumne.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.SumByElement(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Material by (summarized) element area and volumne.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Material">Material as Dynamo type.</returns>
            <returns name="area">Area as double.</returns>
            <returns name="volumne">Volumne as double.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.Sum(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Element by (summarized) material area and volumne.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
            <returns name="area">Area as double.</returns>
            <returns name="volumne">Volumne as double.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.Density(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get material asset as physical and thermal density.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="physical">Physical density.</returns>
            <returns name="thermal">Thermal density.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementHasMaterial(Orchid.RevitProject.Common.Document)">
            <summary>
            Get elements that has material quantities in document, return element grouped by category.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Element">Element.</returns>
            <returns name="Category">Category.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementTypeHasMaterial(Orchid.RevitProject.Common.Document,System.Boolean)">
            <summary>
            Get elements that has material quantities in document, return element grouped by category.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="library">Include library content?</param>
            <returns name="ElementType">ElementType.</returns>
            <returns name="Category">Category.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementByCategory(Orchid.RevitProject.Common.Document,System.Collections.IList)">
            <summary>
             Get all elements by category in document, return element grouped by category.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="category">Category.</param>
            <returns name="Element">Element.</returns>
            <returns name="Category">Category.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementTypeByCategory(Orchid.RevitProject.Common.Document,System.Collections.IList,System.Boolean)">
            <summary>
             Get all elements by category in document, return element grouped by category.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="library">Include library content?</param>
            <param name="category">Category.</param>
            <returns name="ElementType">ElementType.</returns>
            <returns name="Category">Category.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementByCategoryType(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get all elements by category in document, return element grouped by category and category type.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="categoryType">CategoryType.</param>
            <returns name="Element">Element.</returns>
            <returns name="Category">Category.</returns>
            <returns name="CategoryType">CategoryType.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementTypeByCategoryType(Orchid.RevitProject.Common.Document,System.String,System.Boolean)">
            <summary>
            Get all elements by category in document, return element grouped by category and category type.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="categoryType">CategoryType.</param>
            <param name="library">Include library content?</param>
            <returns name="ElementType">ElementType.</returns>
            <returns name="Category">Category.</returns>
            <returns name="CategoryType">CategoryType.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementByLevel(Orchid.RevitProject.Common.Document,Revit.Elements.Element,System.Boolean)">
            <summary>
            Get elements by level in document, return element grouped by category.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="level">Level to collect elements from.</param>
            <param name="spatial">Include spatial elements?</param>
            <returns name="Element">Element.</returns>
            <returns name="Category">Category.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ModelElement(Orchid.RevitProject.Common.Document)">
            <summary>
            Get all model elements in document, return element grouped by category.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Element">Element.</returns>
            <returns name="Category">Category.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementByFamily(Revit.Elements.Family)">
            <summary>
            Get all elements of the specified family from the model.
            </summary>
            <param name="family">The Family.</param>
            <returns name="Element">The list of elements matching the query.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetBoundary(Orchid.RevitProject.Common.Document)">
            <summary>
            Get spatial element boundary.
            </summary>
            <param name="document">Document (rfa) as Orchid document.</param>
            <returns name="SpatialElement">SpatialElement as Dynamo type.</returns>
            <returns name="Element">Element as Dynamo type.</returns>
            <returns name="Curve">Curve as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetBoundary(Orchid.RevitProject.Common.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get spatial element boundary.
            </summary>
            <param name="document">Document (rfa) as Orchid document.</param>
            <param name="spatialElement">SpatialElement as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
            <returns name="Curve">Curve as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetSpaceBoundary(Orchid.RevitProject.Common.Document)">
            <summary>
            Get space boundary.
            </summary>
            <param name="document">Document (rfa) as Orchid document.</param>
            <returns name="Space">Space as Dynamo type.</returns>
            <returns name="Element">Element as Dynamo type.</returns>
            <returns name="Curve">Curve as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetRoomBoundary(Orchid.RevitProject.Common.Document)">
            <summary>
            Get room boundary.
            </summary>
            <param name="document">Document (rfa) as Orchid document.</param>
            <returns name="Room">Room as Dynamo type.</returns>
            <returns name="Element">Element as Dynamo type.</returns>
            <returns name="Curve">Curve as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetAreaBoundary(Orchid.RevitProject.Common.Document)">
            <summary>
            Get area boundary.
            </summary>
            <param name="document">Document (rfa) as Orchid document.</param>
            <returns name="Area">Area as Dynamo type.</returns>
            <returns name="Element">Element as Dynamo type.</returns>
            <returns name="Curve">Curve as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetSeparationLine(Orchid.RevitProject.Common.Document)">
            <summary>
            Get spatial element separation line.
            </summary>
            <param name="document">Document (rfa) as Orchid document.</param>
            <returns name="SpatialElement">SpatialElement as Dynamo type.</returns>
            <returns name="Element">Element as Dynamo type.</returns>
            <returns name="Curve">Curve as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetSeparationLine(Orchid.RevitProject.Common.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get spatial element boundary.
            </summary>
            <param name="document">Document (rfa) as Orchid document.</param>
            <param name="spatialElement">SpatialElement as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
            <returns name="Curve">Curve as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SubCategory.Create(System.Object,System.String)">
            <summary>
            Create subcategory by category in document.
            </summary>
            <param name="category">Category.</param>
            <param name="name">Name of the subcategory.</param>
            <returns name="SubCategory">Category.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SubCategory.Remove(System.Object,System.Object)">
            <summary>
            Remove subcategory by category in document.
            </summary>
            <param name="category">Category.</param>
            <param name="subCategory">The subcategory as string or category.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SubCategory.ByCategory(System.Object)">
            <summary>
            Get subcategories by category in document.
            </summary>
            <param name="category">Category.</param>
            <returns name="SubCategory">Category.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SubCategory.ByName(System.Object,System.String)">
            <summary>
             Get subcategory by name in document.
            </summary>
            <param name="category">Category.</param>
            <param name="name">Name of the subcategory.</param>
            <returns name="SubCategory">Category.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SubCategory.ByName(System.String)">
            <summary>
             Get subcategory by name in document.
            </summary>
            <param name="name">Name of the subcategory.</param>
            <returns name="SubCategory">Category.</returns>
        </member>
        <member name="F:Orchid.RevitProject.Elements.SystemFamily.types">
            Host type elements
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.IsHosting(Revit.Elements.Element)">
            <summary>
            Get the system family hosting condition, output as boolean.
            </summary>
            <param name="element">The system family as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.Hosting(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get the system family hosting condition, output as element.
            </summary>
            <param name="element">The system family  as Dynamo type.</param>
            <returns name="true">Hosting element.</returns>
            <returns name="false">Not hosting element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.GetAnalytical(Revit.Elements.Element)">
            <summary>
            Get analytical element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Element">Element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.SetAnalyticalLocation(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            Set (structural) system family analytical location.
            </summary>
            <param name="element">The system family as Dynamo type.</param>
            <param name="location">The system family analytical location.</param>
            <returns name="Element">Analytical element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.SetAreaLoad(Revit.Elements.Element,Revit.Elements.Element,System.Collections.Generic.List{System.Double})">
            <summary>
            Set (structural) area load.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="areaLoadType">AreaLoadType as Dynamo type.</param>
            <param name="value">Load value as double.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="F:Orchid.RevitProject.Elements.SystemFamilyType.types">
            Host type elements
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.ThermalProperties(Revit.Elements.Element)">
            <summary>
            Get the system family thermal properties.
            </summary>
            <param name="elementType">The system family type as Dynamo type.</param>
            <returns name="HeatTransferCoefficient">The system family heat transfer coefficient (W/(m^2*K)).</returns>
            <returns name="ThermalResistance">The system family thermal resistance ((m^2*K)/Watt).</returns>
            <returns name="ThermalMass">The system family thermal mass (kg J/K or kg ft^2/(s^2 K)).</returns>
            <returns name="Absorptance">The system family absorptance (double).</returns>
            <returns name="Roughness">The system family roughness (integer).</returns>
            <search>Wall,Floor,Roof,Ceiling</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.CreateCompoundLayer(Revit.Elements.Element,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32})">
            <summary>
            Create a layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type as Dynamo type.</param>
            <param name="function">The function of the layer (integer).</param>
            <param name="material">The material as Dynamo type.</param>
            <param name="thickness">Thickness of the layer.</param>
            <param name="wrapping">Wrapping of the layer.</param>
            <param name="variable">Set the layer variable.</param>
            <param name="structural">Set the layer structural.</param>
            <param name="placement">Placement of the layer (string).</param>
            <param name="index">The index of the layer.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>Wall,Floor,Roof,Ceiling</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.DeleteCompoundLayer(Revit.Elements.Element,System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete a layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type as Dynamo type.</param>
            <param name="index">The index of the layer.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>Wall,Floor,Roof,Ceiling</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.GetCompoundLayerMaterial(Revit.Elements.Element)">
            <summary>
            Get the compound layer material in a system family type that
            have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type as Dynamo type.</param>
            <returns name="Material">Material.</returns>
            <search>Wall,Floor,Roof,Ceiling</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.GetCompoundLayerWidth(Revit.Elements.Element)">
            <summary>
            Get the compound layer width in a system family type that
            have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type as Dynamo type.</param>
            <returns name="double">Width.</returns>
            <search>Wall,Floor,Roof,Ceiling</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.SetCompoundLayerMaterial(Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the material by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type as Dynamo type.</param>
            <param name="material">The material as Dynamo type.</param>
            <param name="index">The index to set.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>Wall,Floor,Roof,Ceiling</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.SetCompoundLayerWidth(Revit.Elements.Element,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the width by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type as Dynamo type.</param>
            <param name="thickness">Thickness of the layer.</param>
            <param name="index">The index to set.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>Wall,Floor,Roof,Ceiling</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.SetCompoundLayerWrapping(Revit.Elements.Element,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Wrapping of the layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type as Dynamo type.</param>
            <param name="wrapping">Wrapping of the layer.</param>
            <param name="index">The index to set.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>Wall,Floor,Roof,Ceiling</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.SetCompoundLayerVariable(Revit.Elements.Element,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the layer variable by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type as Dynamo type.</param>
            <param name="variable">Set the layer variable.</param>
            <param name="index">The index to set.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>Wall,Floor,Roof,Ceiling</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.SetCompoundLayerStructural(Revit.Elements.Element,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the layer structural by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type as Dynamo type.</param>
            <param name="structural">Set the layer structural.</param>
            <param name="index">The index to set.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>Wall,Floor,Roof,Ceiling</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Types.ByName(System.String)">
            <summary>
            Get a type from the revit assembly by name.
            </summary>
            <param name="name">The name of the assembly type.</param>
            <returns name="Types">Types.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Types.Name(System.Type)">
            <summary>
            Get the name from the assembly.
            </summary>
            <param name="types">The assembly type.</param>
            <returns name="string">Name.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Wall.AllStackedWall">
            <summary>
            All stacked wall in current document.
            </summary>
            <returns name="Wall">Stacked wall as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Wall.IsFlipped(Revit.Elements.Wall)">
            <summary>
            Get the wall flip condition, output as boolean.
            </summary>
            <param name="wall">Wall as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Wall.Flipped(System.Collections.Generic.List{Revit.Elements.Wall})">
            <summary>
            Get the wall flip condition, output as element.
            </summary>
            <param name="wall">Wall as Dynamo type.</param>
            <returns name="true">Flipped element.</returns>
            <returns name="false">Not flipped element.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Wall.Orientation(Revit.Elements.Wall)">
            <summary>
            Get the wall orientation, output as vector.
            </summary>
            <param name="wall">Wall as Dynamo type.</param>
            <returns name="Vector">Vector.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.WallType.Function(Revit.Elements.Element)">
            <summary>
            Get the wall type function.
            </summary>
            <param name="wallType">The wall type type as Dynamo type.</param>
            <returns name="string">The wall type function.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.WallType.Kind(Revit.Elements.Element)">
            <summary>
            Get the wall type kind.
            </summary>
            <param name="wallType">The wall type type as Dynamo type.</param>
            <returns name="string">The wall type kind.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.WallType.Width(Revit.Elements.Element)">
            <summary>
            Get the wall type width.
            </summary>
            <param name="wallType">The wall type type as Dynamo type.</param>
            <returns name="double">The wall type width.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Datum.IsVisibleInView(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Verify if datum element is visible in view.
            </summary>
            <param name="element">Datum element as Dynamo type.</param>
            <param name="view">View as Dynamo type.</param>
            <returns name="boolean">Whether datum element is visible in view or not.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Datum.GetPropagationView(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Get propagation view for datum element. 
            Note: Null is returned if datum element is not
            visible in view and/or no views were found!
            </summary>
            <param name="element">Datum element as Dynamo type.</param>
            <param name="view">View as Dynamo type.</param>
            <returns name="View">View as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Datum.SetPropagationView(Revit.Elements.Element,Revit.Elements.Element,System.Collections.IEnumerable)">
            <summary>
            Set propagation view to datum element.
            </summary>
            <param name="element">Datum element as Dynamo type.</param>
            <param name="view">View as Dynamo type.</param>
            <param name="target">Target view as Dynamo type.</param>
            <returns name="boolean">Whether datum element is propagated to target view or not.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.ReferencePlane.All">
            <summary>
            Get all reference plane.
            </summary>
            <returns name="ReferencePlane">The list of reference planes.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.ReferencePlane.ByName(System.String)">
            <summary>
            Get reference plane by name.
            </summary>
            <param name="name">Name as string.</param>
            <returns name="ReferencePlane">ReferencePlane as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.All">
            <summary>
            Get all levels.
            </summary>
            <returns name="Level">The list of levels.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.Structural">
            <summary>
            Get all structural levels.
            </summary>
            <returns name="Level">The list of levels.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.BuildingStory">
            <summary>
            Get all building story levels.
            </summary>
            <returns name="Level">The list of levels.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.ByName(System.String)">
            <summary>
            Get level by name.
            </summary>
            <param name="name">Name as string.</param>
            <returns name="Level">Level as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.IsStructural(Revit.Elements.Element)">
            <summary>
            Determines if level is structural.
            </summary>
            <param name="level">Level as Dynamo type.</param>
            <returns name="boolean">Whether the level is structural.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.IsBuildingStory(Revit.Elements.Element)">
            <summary>
            Determines if level is building story.
            </summary>
            <param name="level">Level as Dynamo type.</param>
            <returns name="boolean">Whether the level is building story.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.AssociatedPlan(Revit.Elements.Element)">
            <summary>
            Get associated plan view. 
            Either the first associated floor or structural view is returned.
            </summary>
            <param name="level">Level as Dynamo type.</param>
            <returns name="View">View as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.GetElevation(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get level elevation.
            </summary>
            <param name="level">Level as Dynamo type.</param>
            <param name="origin">Get the elevation relative to the Project origin?</param>
            <returns name="double">Elevation as double.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.SetElevation(Revit.Elements.Element,System.Double)">
            <summary>
            Set level elevation.
            </summary>
            <param name="level">Level as Dynamo type.</param>
            <param name="value">Double value for the elevation.</param>
            <returns name="Level">Level as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Grid.All">
            <summary>
            Get all grid in the document.
            </summary>
            <returns name="Grid">Grid as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Grid.GetVerticalExtents(Revit.Elements.Element)">
            <summary>
            Get grid vertical extents.
            </summary>
            <param name="grid">Grid as Dynamo type.</param>
            <returns name="Grid">Grid as Dynamo type.</returns>
            <returns name="TopExtent">Value as double.</returns>
            <returns name="BottomExtent">Value as double.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Grid.SetVerticalExtents(Revit.Elements.Element,System.Double,System.Double)">
            <summary>
            Set grid vertical extents.
            </summary>
            <param name="grid">Grid as Dynamo type.</param>
            <param name="topExtent">Value as double.</param>
            <param name="bottomExtent">Value as double.</param>
            <returns name="Grid">Grid as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Grid.MoveVerticalExtents(Revit.Elements.Element,System.Double)">
            <summary>
            Move grid vertical extents.
            </summary>
            <param name="grid">Grid as Dynamo type.</param>
            <param name="distance">Value as double.</param>
            <returns name="Grid">Grid as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.ToString">
            <summary>
            Connector string override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.MEPSystem(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Get MEP System by connector.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="System">The System as Dynamo type.</returns>
            <returns name="Type">The type of the SystemType as string value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.MEPSystemType(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Get MEP SystemType by connector.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="SystemType">The SystemType as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.Create(System.Collections.Generic.IEnumerable{Revit.Elements.Element},System.String)">
            <summary>
            Create electrical system by components.
            </summary>
            <param name="components">Components in the electrical system.</param>
            <param name="type">DuctSystemType for the electrical system.</param>
            <returns name="System">System.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Element.Connector(Revit.Elements.Element)">
            <summary>
            Get connector by element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="Connector">Connector as Orchid type.</returns>
            <returns name="Direction">Direction of the connector.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Element.MEPSystem(Revit.Elements.Element)">
            <summary>
            Get MEP System and the type of the System by element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="System">MEP System as Dynamo type.</returns>
            <returns name="Classification">The classification of the System as string value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Element.MEPSystemType(Revit.Elements.Element)">
            <summary>
            Get MEP SystemType by element.
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <returns name="SystemType">MEP SystemType as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.FamilyInstance.Connector(Revit.Elements.FamilyInstance)">
            <summary>
            Get connector by family instance.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="Connector">Connector as Orchid type.</returns>
            <returns name="Direction">Direction of the connector.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.FamilyInstance.MEPSystem(Revit.Elements.FamilyInstance)">
            <summary>
            Get MEP System and the type of the System by family instance.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="System">MEP System as Dynamo type.</returns>
            <returns name="Classification">The classification of the System as string value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.FamilyInstance.MEPSystemType(Revit.Elements.FamilyInstance)">
            <summary>
            Get MEP SystemType by family instance.
            </summary>
            <param name="familyInstance">FamilyInstance as Dynamo type.</param>
            <returns name="SystemType">MEP SystemType as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Create(Orchid.RevitProject.Systems.Connector,System.Collections.Generic.IEnumerable{Orchid.RevitProject.Systems.Connector},System.String)">
            <summary>
            Create piping system by connectors.
            </summary>
            <param name="baseConnector">Base connector for the piping system.</param>
            <param name="connectors">Remaining connectors in the piping system.</param>
            <param name="type">DuctSystemType for the piping system.</param>
            <returns name="System">System.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate a piping system.
            </summary>
            <param name="pipingSystem">PipingSystem as Dynamo type.</param>
            <param name="systemName">Optional system name as string value.</param>
            <returns name="System">System.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Component(Revit.Elements.Element)">
            <summary>
            Get components (FamilyInstance) in the PipingSystem.
            </summary>
            <param name="mechanicalSystem">PipingSystem as Dynamo type.</param>
            <returns name="FamilyInstance">Component as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Accessory(Revit.Elements.Element)">
            <summary>
            Get accessory components in the PipingSystem.
            </summary>
            <param name="mechanicalSystem">PipingSystem as Dynamo type.</param>
            <returns name="FamilyInstance">Terminal as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Segment(Revit.Elements.Element)">
            <summary>
            Get segments in the PipingSystem.
            </summary>
            <param name="mechanicalSystem">PipingSystem as Dynamo type.</param>
            <returns name="FamilyInstance">Segment as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Network(Revit.Elements.Element)">
            <summary>
            Get network elements in the PipingSystem.
            </summary>
            <param name="pipingSystem">PipingSystem as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Pipe(Revit.Elements.Element)">
            <summary>
            Get pipes in the PipingSystem.
            </summary>
            <param name="pipingSystem">PipingSystem as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Create(Orchid.RevitProject.Systems.Connector,System.Collections.Generic.IEnumerable{Orchid.RevitProject.Systems.Connector},System.String)">
            <summary>
            Create mechanical system by connectors.
            </summary>
            <param name="baseConnector">Base connector for the mechanical system.</param>
            <param name="connectors">Remaining connectors in the mechanical system.</param>
            <param name="type">DuctSystemType for the mechanical system.</param>
            <returns name="System">System.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate a mechanical system.
            </summary>
            <param name="mechanicalSystem">MechanicalSystem as Dynamo type.</param>
            <param name="systemName">Optional system name as string value.</param>
            <returns name="System">System.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Component(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get components (FamilyInstance) in the MechanicalSystem.
            </summary>
            <param name="mechanicalSystem">MechanicalSystem as Dynamo type.</param>
            <param name="include">Include handling unit in list?</param>
            <returns name="FamilyInstance">Component as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Fitting(Revit.Elements.Element)">
            <summary>
            Get fittings in the MechanicalSystem.
            </summary>
            <param name="mechanicalSystem">MechanicalSystem as Dynamo type.</param>
            <returns name="FamilyInstance">Fitting as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Accessory(Revit.Elements.Element)">
            <summary>
            Get accessory components in the MechanicalSystem.
            </summary>
            <param name="mechanicalSystem">MechanicalSystem as Dynamo type.</param>
            <returns name="FamilyInstance">Terminal as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Terminal(Revit.Elements.Element)">
            <summary>
            Get terminal components in the MechanicalSystem.
            </summary>
            <param name="mechanicalSystem">MechanicalSystem as Dynamo type.</param>
            <returns name="FamilyInstance">Terminal as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Equipment(Revit.Elements.Element)">
            <summary>
            Get equipment components in the MechanicalSystem.
            </summary>
            <param name="mechanicalSystem">MechanicalSystem as Dynamo type.</param>
            <returns name="FamilyInstance">Equipment as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.HandlingUnit(Revit.Elements.Element)">
            <summary>
            Get handling unit in the MechanicalSystem.
            </summary>
            <param name="mechanicalSystem">MechanicalSystem as Dynamo type.</param>
            <returns name="FamilyInstance">Handling unit as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Network(Revit.Elements.Element)">
            <summary>
            Get network elements in the MechanicalSystem.
            </summary>
            <param name="mechanicalSystem">MechanicalSystem as Dynamo type.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Duct(Revit.Elements.Element)">
            <summary>
            Get ducts in the MechanicalSystem.
            </summary>
            <param name="mechanicalSystem">MechanicalSystem as Dynamo type.</param>
            <returns name="Element">Component as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystem.All">
            <summary>
            Get all MEP System in document.
            </summary>
            <returns name="System">MEP System as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystem.ByName(System.String)">
            <summary>
            Get MEP System by name in document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="System">MEP System as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystem.Type(Revit.Elements.Element)">
            <summary>
            Get the type of the MEP System.
            </summary>
            <param name="system">MEP System as Dynamo type.</param>
            <returns name="Type">The type of the SystemType as string value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystemType.All">
            <summary>
            Get all SystemType in document.
            </summary>
            <returns name="SystemType">MEP SystemType as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystemType.ByName(System.String)">
            <summary>
            Get SystemType by name in document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="SystemType">MEP SystemType as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.ByElement(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a element at the element center point.
            </summary>
            <param name="view">View to tag in.</param>
            <param name="element">Element to tag.</param>
            <param name="tagType">Tag type to use.</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults set to true!</param>
            <param name="addLeader">Optional: Add a leader, defaults set to false!</param>
            <returns name="Tag">Tag as Dynamo type.</returns>
            <search>tag room, tag space, tag area,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.ByElementAndLocation(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a element at a specified location point.
            </summary>
            <param name="view">View to tag in.</param>
            <param name="element">Element to tag.</param>
            <param name="tagType">Tag type to use.</param>
            <param name="location">Location point, default set to null -> element center.</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults set to true!</param>
            <param name="addLeader">Optional: Add a leader, defaults set to false!</param>
            <returns name="Tag">Tag as Dynamo type.</returns>
            <search>tag element,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.BySpatialElement(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a spatial element (Room, Space, Area) at the element center point.
            </summary>
            <param name="view">View to tag in.</param>
            <param name="spatialElement">SpatialElement to tag (Room, Space, Area).</param>
            <param name="tagType">Tag type to use.</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults set to true!</param>
            <param name="addLeader">Optional: Add a leader, defaults set to false!</param>
            <returns name="Tag">Tag as Dynamo type.</returns>
            <search>tag room, tag space, tag area,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.BySpatialElementAndLocation(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a spatial element (Room, Space, Area) at a specified location point.
            </summary>
            <param name="view">View to tag in.</param>
            <param name="spatialElement">SpatialElement to tag (Room, Space, Area).</param>
            <param name="tagType">Tag type to use.</param>
            <param name="location">Location point, default set to null -> element center.</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults set to true!</param>
            <param name="addLeader">Optional: Add a leader, defaults set to false!</param>
            <returns name="Tag">Tag as Dynamo type.</returns>
            <search>tag room, tag space, tag area,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.SeparateElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            Find separate elements
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.MatchElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            Find matching elements
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.TransferElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.XYZ)">
            Transfer a set of elements across documents.
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.TransferLinkedElements(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.RevitLinkInstance,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document)">
            Transfer a set of elements across linked documents.
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.TransferDetalingElements(Autodesk.Revit.DB.View,Autodesk.Revit.DB.View)">
            Transfer all view-specific elements from source view to target view.
        </member>
        <member name="M:Orchid.RevitProject.Filters.ElementFilter.ToString">
            <summary>
            ElementFilter string override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Filters.FilterRule.ToString">
            <summary>
            FilterRule string override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Filters.FilterRule.ToOrchidType(Autodesk.Revit.DB.FilterRule)">
            <summary>
            Convert Autodesk Revit filter rule to Orchid filter rule.
            </summary>
            <param name="filterRule">FilterRule as Revit type.</param>
            <returns name="FilterRule">FilterRule as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Filters.FilterRule.Create(System.String,System.String,System.Object)">
            <summary>
            Create a filter rule by parameter name.
            Note: This function handles only user-defined parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="parameterName">User-defined parameter name to filter.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="value">Value to check.</param>
            <returns name="FilterRule">FilterRule as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Filters.FilterRule.Create(Revit.Elements.Element,System.String,System.Object)">
            <summary>
            Create a filter rule by Dynamo (Revit.Elements.Element) parameter.
            Note: This function handles only user-defined parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="parameter">User-defined parameter as Dynamo type to filter.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="value">Value to check.</param>
            <returns name="FilterRule">FilterRule as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Filters.FilterRule.Create(Revit.Elements.Parameter,System.String,System.Object)">
            <summary>
            Create a filter rule by Dynamo (Revit.Elements.Parameter) parameter.
            Note: This function handles only element parameters.
            </summary>
            <param name="parameter">Parameter as Dynamo type.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="value">Value to check.</param>
            <returns name="FilterRule">FilterRule as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.All">
            <summary>
            All ParameterFilter in current document.
            </summary>
            <returns name="ParameterFilter">ParameterFilter as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.ByName(System.String)">
            <summary>
            Get ParameterFilter by name.
            </summary>
            <param name="name">Name as string.</param>
            <returns name="ParameterFilter">ParameterFilter as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.ByRule(System.String,System.Collections.Generic.IEnumerable{Orchid.RevitProject.Filters.FilterRule},System.Collections.Generic.IEnumerable{Revit.Elements.Category},System.Boolean)">
            <summary>
            Create a filter by rule.
            </summary>
            <param name="name">Name for the filter.</param>
            <param name="filterRule">FilterRule as Orchid type.</param>
            <param name="category">Category the filter apply to.</param>
            <param name="andOr">True set an And filter, false set an Or filter!?</param>
            <returns name="ParameterFilter">ParameterFilter as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.GetRule(Revit.Filter.ParameterFilterElement)">
            <summary>
            Get filter rule by parameter filter.
            </summary>
            <param name="parameterFilter">ParameterFilter as Dynamo type.</param>
            <returns name="FilterRule">FilterRule as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.RuleTree(Revit.Filter.ParameterFilterElement)">
            <summary>
            Get filter rule tree. This function does not work in Revit 2018 versions and before this!
            </summary>
            <param name="parameterFilter">ParameterFilter as Dynamo type.</param>
            <returns name="RuleTree">FilterRule tree list.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.AddRuleSet(Revit.Filter.ParameterFilterElement,System.Collections.Generic.IEnumerable{Orchid.RevitProject.Filters.FilterRule},System.Collections.IEnumerable,System.Collections.IList,System.Boolean)">
            <summary>
            Add filter rule set. This function does not work in Revit 2018 versions and before this!
            </summary>
            <param name="parameterFilter">ParameterFilter as Dynamo type.</param>
            <param name="filterRule">FilterRule as Orchid type.</param>
            <param name="ruleTree">RuleTree as Orchid type.</param>
            <param name="attachedTo">The index the rule set is being attached to. 
            Default value (null) attaches the set to the last index.</param>
            <param name="andOr">True set an And filter, false set an Or filter!?</param>
            <returns name="ParameterFilter">ParameterFilter as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.Name(System.Int32)">
            <summary>
            Get the builtin parameter name.
            </summary>
            <param name="parameterId">Integer value for the builtin parameter.</param>
            <returns name="string">string.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.Label(System.Int32)">
            <summary>
            Get the builtin parameter label.
            </summary>
            <param name="parameterId">Integer value for the builtin parameter.</param>
            <returns name="string">string.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.All">
            <summary>
            Get all builtin parameters.
            </summary>
            <returns name="integer">parameter ids.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Definition.ToString">
            <summary>
            ElementFilter string override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Definition.ByName(System.String)">
            <summary>
            Get parameter definition by name.
            </summary>
            <param name="name">The name of the shared parameter.</param>
            <returns name="Definition">The parameter definition.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Definition.ByParameter(Revit.Elements.Element)">
            <summary>
            Get parameter definition by parameter in the currrent project document.
            </summary>
            <param name="parameter">Parameter as Dynamo type.</param>
            <returns name="Definition">The parameter definition.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Definition.GetExternal(System.String)">
            <summary>
            Get shared parameter definition by name from the current shared parameter file.
            </summary>
            <param name="name">The name of the shared parameter.</param>
            <returns name="Definition">The shared parameter definition.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.GlobalParameter.Associate(Revit.Elements.Element,System.String,Revit.Elements.Element)">
            <summary>
            Associate element parameter to global parameter.
            </summary>
            <param name="element">Element as string or Dynamo type.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="globalParameter">The global parameter.</param>
            <returns name="Element">Element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.GlobalParameter.GetAssociated(Revit.Elements.Element,System.String)">
            <summary>
            Get associated global parameter.
            </summary>
            <param name="element">Element as string or Dynamo type.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns name="Parameter">Parameter.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.GlobalParameter.HasAssociated(Revit.Elements.Element,System.String)">
            <summary>
            Verify if parameter has associated global parameter.
            </summary>
            <param name="element">Element as string or Dynamo type.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns name="boolean">Whether true or false value.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.Create(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Create project parameter by name. 
            Note: Due to the Revit API does not allow adding internal parameters, parameters
            are added as external parameters in the same way as shared parameters. Therefore,
            parameters cannot be associated with other &lt;Family Type&gt; and will appear
            as shared parameters that are not stored in your regular parameter file.
            This includes if the parameter exists is the category binding being updated!
            </summary>
            <param name="parameterName">The name of the parameter to add (create).</param>
            <param name="type">BuiltIn Parameter Type.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter?, otherwise it's a type parameter!</param>
            <param name="vary">Vary parameter between groups?</param>
            <param name="category">Category(ies) the parameter applies to, If no category is supplied, 
            all possible categories are selected.</param>
            <returns name="Parameter">Parameter.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.ByName(System.String)">
            <summary>
            Get parameter by name. 
            Note: This function handles only User-defined parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="parameterName">Name of the User-defined parameter.</param>
            <returns name="Parameter">User-defined parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.ById(System.Int32)">
            <summary>
            Get parameter by id. 
            Note: This function handles only User-defined parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="id">Id as integer value of the User-defined parameter.</param>
            <returns name="Parameter">User-defined parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.Delete(System.String)">
            <summary>
            Delete parameter by name in the project.
            </summary>
            <param name="parameterName">The name of the parameter to delete.</param>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.ChangeCategory(System.String,System.Boolean,System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Change category binding for parameter by name in the project.
            </summary>
            <param name="parameterName">The name of the parameter to change.</param>
            <param name="instance">Is instance parameter?, otherwise it's a type parameter!</param>
            <param name="category">Category(ies) to change the parameter binding to.</param>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ParameterServices.PresetSharedParameters(Autodesk.Revit.DB.Document,System.String,System.Boolean,System.Boolean)">
            <summary>
            Store current shared parameter file and set/use a temp file.
            </summary>
            <param name="document">Revit document.</param>
            <param name="file">Provided shared parameter file or null.</param>
            <param name="embedded">Use an embedded file?</param>
            <param name="empty">Create an empty file?</param>
            <returns name = "SPfiles">List of currentSPfile and tempSPfile as strings.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ParameterServices.ResetSharedParameters(Autodesk.Revit.DB.Document,System.String,System.Boolean,System.Boolean,System.String[])">
            <summary>
            reset to point of departure, apply old shared parameter file if changed.
            </summary>
            <param name="document">Revit document.</param>
            <param name="file">Provided shared parameter file or null.</param>
            <param name="embedded">Use an embedded file?</param>
            <param name="empty">Create an empty file?</param>
            <param name="presetFiles">List of currentSPfile and tempSPfile as strings.</param>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ParameterServices.LoadSharedParameter(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Revit.Elements.Category},System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <param name="groupName"></param>
            <param name="type"></param>
            <param name="group"></param>
            <param name="tooltip"></param>
            <param name="instance"></param>
            <param name="vary"></param>
            <param name="category"></param>
            <param name="create">Boolean value for create parameter!?</param>
            <param name="empty">Boolean value for empty/project parameter!?</param>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.Create(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Create shared parameter by name in the project. 
            If the parameter not exists in the shared parameter file is it being created.
            Note: If the parameter exists is the category binding being updated!
            </summary>
            <param name="parameterName">The name of the parameter to create.</param>
            <param name="groupName">The name of the group where the parameter belong to.</param>
            <param name="type">BuiltIn Parameter Type.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter!</param>
            <param name="vary">Vary parameter between groups?</param>
            <param name="category">Category(ies) the parameter applies to.
            If no category is supplied, all possible categories are selected.</param>
            <returns name="Parameter">Parameter as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.Add(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Add shared parameter by name, from current loaded shared parameter file.
            Note: If the parameter exists is the category binding being updated, and 
            tooltip is being added if exsist!
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="groupName">The name of the group where the parameter belong to.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter!</param>
            <param name="vary">Vary parameter between groups?</param>
            <param name="category">Category(ies) the parameter applies to.
            If no category is supplied, all possible categories are selected.</param>
            <returns name="Parameter">Parameter as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.AddByGroup(System.Collections.Generic.IEnumerable{Orchid.RevitProject.Common.Document},System.String[],System.String[],System.Boolean[],System.Boolean[],System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Add shared parameters by groupName, from current loaded shared parameter file. 
            Parameters are set with the same settings pr. provided group and attached the 
            same provided category(ies). Note: If the parameter exists is the category 
            binding being updated, and tooltip is being added if exsist!
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="groupName">Group of the parameter to add from the file, If no 
            group is supplied, all possible groups are selected.</param>
            <param name="group">BuiltIn Parameter Group to add pr. provided group.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter! 
            Boolean value must be set pr. provided group.</param>
            <param name="vary">Vary parameter between groups? 
            Boolean value must be set pr. provided group.</param>
            <param name="category">Category(ies) the parameter applies to.
            If no category is supplied, all possible categories are selected.</param>
            <returns name="Parameter">Parameter as Dynamo type.</returns>
            <returns name="GroupName">List of group names.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.AddByFile(System.Collections.Generic.IEnumerable{Orchid.RevitProject.Common.Document},System.String,System.String[],System.String[],System.Boolean[],System.Boolean[],System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Add parameters by groupName, by the provided shared parameter file. 
            Parameters are set with the same settings pr. provided group and attached the 
            same provided category(ies). Note: If the parameter exists is the category
            binding being updated, and tooltip is being added if exsist!
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="file">Shared Parameter file incl. file extension.</param>
            <param name="groupName">Group of the parameter to add from the file.
            If no group is supplied, all possible groups are selected.</param>
            <param name="group">BuiltIn Parameter Group to add pr. provided group.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter! 
            Boolean value must be set pr. provided group.</param>
            <param name="vary">Vary parameter between groups? 
            Boolean value must be set pr. provided group.</param>
            <param name="category">Category(ies) the parameter applies to.
            If no category is supplied, all possible categories are selected.</param>
            <returns name="Parameter">Parameter as Dynamo type.</returns>
            <returns name="GroupName">List of group names.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.AddIFC(System.Collections.Generic.IEnumerable{Orchid.RevitProject.Common.Document},System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Add basic IFC type and instance shared parameters in the project 
            (IfcExportAs, IfcExportType, IfcDescription, IFC CAD Layer).
            Parameters are set with the same settings pr. group and attached the 
            same provided category(ies). Note: If the parameter exists is the category
            binding being updated, and tooltip is being added if exsist!
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="category">Category(ies) the parameter applies to.
            If no category is supplied, all possible categories are selected.</param>
            <returns name="Parameter">Parameter as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.AddBIM7AA(System.Collections.Generic.IEnumerable{Orchid.RevitProject.Common.Document},System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Add BIM7AA type shared parameters in the project (BIM7AATypeID, BIM7AATypeCode, 
            BIM7AATypeNumber, BIM7AATypeName, BIM7AATypeDescription, BIM7AATypeComments).
            Parameters are set with the same settings pr. group and attached the
            same provided category(ies). Note: If the parameter exists is the category
            binding being updated, and tooltip is being added if exsist!
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="category">Category(ies) the parameter applies to.
            If no category is supplied, all possible categories are selected.</param>
            <returns name="Parameter">Parameter as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.AddCCS(System.Collections.Generic.IEnumerable{Orchid.RevitProject.Common.Document},System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Add basic CCS type and instance shared parameters in the project.
            Parameters are set with the same settings pr. group and attached the 
            same provided category(ies). Note: If the parameter exists is the category
            binding being updated, and tooltip is being added if exsist!
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="category">Category(ies) the parameter applies to.
            If no category is supplied, all possible categories are selected.</param>
            <returns name="Parameter">Parameter as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.GetFile">
            <summary>
            Get the shared parameter file as string.
            </summary>
            <returns name="file">The shared parameter file.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.ByFile(System.String)">
            <summary>
            Get all shared parameter by file.
            </summary>
            <param name="file">The shared parameter file, incl. path.</param>
            <returns name="GroupName">List of group names.</returns>
            <returns name="ParameterName">List of parameters.</returns>
            <returns name="ParameterType">List of types.</returns>
            <returns name="Definition">List of definitions.</returns>
            <returns name="Guid">List of guids.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.SetFile(System.String)">
            <summary>
            Set the shared parameter file.
            </summary>
            <param name="file">The shared parameter file, incl. path.</param>
            <returns name="file">The shared parameter file.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.GroupByTypeAndGroupName(System.String)">
            <summary>
            Get shared parameter by file, grouped by parameter type and group name.
            </summary>
            <param name="file">The shared parameter file, incl. path.</param>
            <returns name="ParameterType">List of types.</returns>
            <returns name="GroupName">List of group names.</returns>
            <returns name="ParameterName">List of parameters.</returns>
            <returns name="Definition">List of definitions.</returns>
            <returns name="Guid">List of guids.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.GroupByGroupNameAndType(System.String)">
            <summary>
            Get shared parameter by file, grouped by group name and parameter type.
            </summary>
            <param name="file">The shared parameter file, incl. path.</param>
            <returns name="GroupName">List of group names.</returns>
            <returns name="ParameterType">List of types.</returns>
            <returns name="ParameterName">List of parameters.</returns>
            <returns name="Definition">List of definitions.</returns>
            <returns name="Guid">List of guids.</returns>
        </member>
        <member name="P:Orchid.RevitProject.Views.Sheet.All">
            <summary>
            Get all sheets.
            </summary>
            <returns name="View">All sheet views as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.All">
            <summary>
            All sheet set in current document.
            </summary>
            <returns name="ViewSheetSet">ViewSheetSet as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.Create(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            Create sheet set.
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="name">Name for the ViewSheetSet.</param>
            <returns name="ViewSheetSet">ViewSheetSet as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.Change(System.Collections.Generic.List{Revit.Elements.Element},System.Object)">
            <summary>
            Change sheet set.
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="viewSheetSet">ViewSheetSet as string or Dynamo type.</param>
            <returns name="ViewSheetSet">ViewSheetSet as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.GetView(System.Object)">
            <summary>
            Get View from sheet set.
            </summary>
            <param name="viewSheetSet">ViewSheetSet as string or Dynamo type.</param>
            <returns name="View">View as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.Delete(System.Object)">
            <summary>
            Delete sheet set.
            </summary>
            <param name="viewSheetSet">ViewSheetSet as string or Dynamo type.</param>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Duplicate(Revit.Elements.Element,System.String,System.String)">
            <summary>
            Duplicate view.
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="name">Name for the duplicated view.</param>
            <param name="option">View duplicate option as string.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.All(Orchid.RevitProject.Common.Document)">
            <summary>
            All view in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.All">
            <summary>
            All view in current document.
            </summary>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ModelAll(Orchid.RevitProject.Common.Document)">
            <summary>
            All model view in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ModelAll">
            <summary>
            All model view in current document.
            </summary>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ByType(Orchid.RevitProject.Common.Document,Revit.Elements.Element)">
            <summary>
            All view by viewType in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="viewType">ViewType as Dynamo type.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ByType(Revit.Elements.Element)">
            <summary>
            All view by viewType in current document.
            </summary>
            <param name="viewType">ViewType as Dynamo type.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ByName(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            View by name in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <param name="name">Name of the View.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ByName(System.String)">
            <summary>
            View by name in current document.
            </summary>
            <param name="name">Name of the View.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.GetCropBox(Revit.Elements.Element)">
            <summary>
            Get crop box.
            </summary>
            <param name="view">View as Dynamo type.</param>
            <returns name="BoundingBox">BoundingBox as Dynamo type.</returns>
            <returns name="Curve">Curve as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.SetCropBox(Revit.Elements.Element,Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Set crop box by bounding box.
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="boundingBox">BoundingBox as Dynamo type.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.SetCropBox(Revit.Elements.Element,System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Curve})">
            <summary>
            Set crop box by curve.
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="curve">Curves forming a cropbox shape.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.MoveCropBox(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Move crop box (2D) by vector (translation).
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="vector">Translation vector.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.MoveCropBox(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Move crop box (2D) by point (translation).
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="point">Translation point.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.MoveSectionBox(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Move section box (3D) by vector (translation).
            </summary>
            <param name="view3D">View3D as Dynamo type.</param>
            <param name="vector">Translation vector.</param>
            <returns name="View3D">View3D.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.MoveSectionBox(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Move section box (3D) by point (translation).
            </summary>
            <param name="view3D">View3D as Dynamo type.</param>
            <param name="point">Translation point.</param>
            <returns name="View3D">View3D.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Move(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Move view by vector (translation).
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="vector">Translation vector.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Move(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Move view by point (translation).
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="point">Translation point.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.AddFilter(Revit.Elements.Views.View,Revit.Filter.ParameterFilterElement,System.Boolean)">
            <summary>
            Add a filter to a View.
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="parameterFilter">ParameterFilter as Dynamo type.</param>
            <param name="visibility">Set visibility for the filter?</param>
            <returns name="View">View as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.GetPhase(Revit.Elements.Views.View)">
            <summary>
            Get view phase.
            </summary>
            <param name="view">View as Dynamo type.</param>
            <returns name="Phase">Phase as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.SetPhase(Revit.Elements.Views.View,Revit.Elements.Element)">
            <summary>
            Set view phase.
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="phase">Phase as Dynamo type.</param>
            <returns name="View">View as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.All(Orchid.RevitProject.Common.Document)">
            <summary>
            All viewport in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Viewport">Viewport.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.All">
            <summary>
            All viewport in current document.
            </summary>
            <returns name="Viewport">Viewport.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.Move(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Move viewport on sheet.
            Important! Set vector values in true length unit values not scaled according to the viewport!
            </summary>
            <param name="viewport">Viewport as Dynamo type.</param>
            <param name="vector">Vector as Dynamo type.</param>
            <returns name="Viewport">Viewport.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.All(Orchid.RevitProject.Common.Document)">
            <summary>
            All view template in document
            Note: Due to limitations in dynamo will 3D templates fail!
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="ViewTemplate">ViewTemplate.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.All">
            <summary>
            All view template in current document
            Note: Due to limitations in dynamo will 3D templates fail!
            </summary>
            <returns name="ViewTemplate">ViewTemplate.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate view template.
            </summary>
            <param name="viewTemplate">View template as Dynamo type.</param>
            <param name="name">Name for the duplicated view.</param>
            <returns name="ViewTemplate">ViewTemplate.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Delete(Revit.Elements.Element)">
            <summary>
            Delete view template.
            </summary>
            <param name="viewTemplate">View template as Dynamo type.</param>
            <returns name="watch">Add a watch node!</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Get(Revit.Elements.Element)">
            <summary>
            Get view template by view.
            </summary>
            <param name="view">View as Dynamo type.</param>
            <returns name="ViewTemplate">ViewTemplate.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.GetParameterIds(Revit.Elements.Element)">
            <summary>
            Get all parameter ids in view template.
            </summary>
            <param name="viewTemplate">View template as Dynamo type.</param>
            <returns name="integer">Parameter ids.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.GetParameterNames(Revit.Elements.Element)">
            <summary>
            Get all parameter names in view template.
            </summary>
            <param name="viewTemplate">View template as Dynamo type.</param>
            <returns name="string">Parameter names.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Set(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Set view template by view.
            </summary>
            <param name="view">View as Dynamo type.</param>
            <param name="viewTemplate">View template as Dynamo type.</param>
            <returns name="View">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.SetNone(Revit.Elements.Element)">
            <summary>
            Set view template to none (remove view template).
            </summary>
            <param name="view">View as Dynamo type.</param>
            <returns name="view">View.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewType.ByName(System.String)">
            <summary>
            Get view by name.
            </summary>
            <param name="name">View name as string.</param>
            <returns name="ViewType">View type as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Internals.UnitConvert.ToInternalUnits(System.String)">
            <summary>
            Converts to internal units using UnitType (to Revit 2020) or ForgeTypeId (after Revit 2020).
            </summary>
            <param name="str">String value represents UnitType or ForgeTypeId.</param>
            <returns></returns>
        </member>
        <member name="M:Orchid.Internals.UnitConvert.ToInternalUnits(Autodesk.Revit.DB.Definition)">
            <summary>
            Converts to internal units using UnitType (to Revit 2020) or ForgeTypeId (after Revit 2020).
            </summary>
            <param name="definition">Definition.</param>
            <returns></returns>
        </member>
        <member name="M:Orchid.Internals.UnitConvert.FromInternalUnits(System.String)">
            <summary>
            Converts from internal units using UnitType (to Revit 2020) or ForgeTypeId (after Revit 2020).
            </summary>
            <param name="str">String value represents UnitType or ForgeTypeId.</param>
            <returns></returns>
        </member>
        <member name="M:Orchid.Internals.UnitConvert.FromInternalUnits(Autodesk.Revit.DB.Definition)">
            <summary>
            Converts from internal units using UnitType (to Revit 2020) or ForgeTypeId (after Revit 2020).
            </summary>
            <param name="definition">Definition.</param>
            <returns></returns>
        </member>
        <member name="M:Orchid.Internals.Convert.AutodeskFamilyTypeToString(System.Object)">
            Takes string and Revit.Elements.Element, return string
        </member>
        <member name="M:Orchid.Internals.Convert.DynamoElementToString(System.Object)">
            Takes string and Revit.Elements.Element, return string
        </member>
        <member name="M:Orchid.Internals.HideWarning.PreprocessFailures(Autodesk.Revit.DB.FailuresAccessor)">
            Implementation of the IFailuresPreprocessor.
        </member>
        <member name="F:Orchid.Internals.Purge.PurgeGuid">
            The guid of the "Project contains unused families and types" PerformanceAdviserRuleId.
        </member>
        <member name="M:Orchid.Internals.Purge.GetPerformanceAdvisorRuleId(System.String,Autodesk.Revit.DB.PerformanceAdviserRuleId@)">
            Find a PerformanceAdviserRuleId with a guid that matches a supplied guid.
        </member>
        <member name="M:Orchid.Internals.Purge.GetPurgeableElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId}@)">
            Get all purgeable elements.
            Intended for Revit 2017+ as versions up to and including Revit 2016 throw an InternalException.
        </member>
        <member name="F:Orchid.Internals.Purge.bips">
            BuiltInParameter Enumeration
            http://www.revitapidocs.com/2017/fb011c91-be7e-f737-28c7-3f1e1917a0e0.htm
            http://www.revitapidocs.com/2018.1/fb011c91-be7e-f737-28c7-3f1e1917a0e0.htm
        </member>
        <member name="F:Orchid.Internals.Purge.types">
            Type elements (element class)
            http://www.revitapidocs.com/2017/eb16114f-69ea-f4de-0d0d-f7388b105a16.htm
            http://www.revitapidocs.com/2018.1/eb16114f-69ea-f4de-0d0d-f7388b105a16.htm
        </member>
        <member name="T:Orchid.Internals.ObjectComparer">
            this method is forked from Dynamo
            
            Implements Compare function for two objects using following rule.
            1. Numbers are assumed to be smallest, then bool, string and pointers.
            2. If the two objects are IComparable and of the same type, then use it's native comparison mechanism.
            3. If both inputs are value type, but one of them is bool, bool is bigger
            4. Otherwise Convert them all to double and compare.
            5. Else If only one is value type, then value type object is smaller
            6. Else If only one is string, then the string is smaller than other
            7. Else don't know how to compare, so best campare them based on HashCode.
        </member>
        <member name="T:Orchid.Notifications.DynamoBase">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.Adaptive_Component_Creation_Failed">
            <summary>
              Looks up a localized string similar to An adaptive component could not be found or created..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.AnalysisResultsDefaultDescription">
            <summary>
              Looks up a localized string similar to Analysis Results from Dynamo.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.AnalysisResultsDefaultName">
            <summary>
              Looks up a localized string similar to Dynamo Analysis Results.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.AreaSchemeArgumentException">
            <summary>
              Looks up a localized string similar to You must supply an Area Scheme..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.Array_Count_Mismatch">
            <summary>
              Looks up a localized string similar to The number of sample locations and samples is not equal..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.AttachedGroupLocation">
            <summary>
              Looks up a localized string similar to Cannot get location of attached group..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CannotGetBaseOrSurveyPoint">
            <summary>
              Looks up a localized string similar to Cannot get base or survey point from document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CategoryArgumentException">
            <summary>
              Looks up a localized string similar to You must supply a Category..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CategoryVisibilityOverrideError">
            <summary>
              Looks up a localized string similar to Specified View Template is not valid for this View..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CellForPanelNotFound">
            <summary>
              Looks up a localized string similar to Could not find cell for panel.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ChildElementsNotSupported">
            <summary>
              Looks up a localized string similar to Getting child elements is not supported for this type of Element..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CloseInputPolyCurveError">
            <summary>
              Looks up a localized string similar to The input PolyCurve is closed..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurtainGridNotFound">
            <summary>
              Looks up a localized string similar to Element has no Curtain Grid..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurtainGridReferenceError">
            <summary>
              Looks up a localized string similar to Reference should be to Face of the Element..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurtainPanelInternalElementError">
            <summary>
              Looks up a localized string similar to InternalElement of Curtain Panel is not Panel..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurtainPanelIsNotPlanar">
            <summary>
              Looks up a localized string similar to Curtain Panel is not planar.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurtainPanelIsNotRectangular">
            <summary>
              Looks up a localized string similar to Curtain Panel is not rectangular.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurtainPanelShouldRepresentRevitPanel">
            <summary>
              Looks up a localized string similar to Curtain Panel should represent Revit panel.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurtainSystemTypeNotFound">
            <summary>
              Looks up a localized string similar to Curtain System Type not found..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurveIsNotPlanar">
            <summary>
              Looks up a localized string similar to Curve ist not planar. Please supply a planar curve..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurveLoopNotClosed">
            <summary>
              Looks up a localized string similar to Curves do not form a closed loop..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurveNeedsTwoPoints">
            <summary>
              Looks up a localized string similar to Cannot create Curve By Points with less than two points..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurveReferenceExtractionDetail">
            <summary>
              Looks up a localized string similar to You supplied an {0}, but we could not extract a CurveReference from it!.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurveReferenceExtractionFailure">
            <summary>
              Looks up a localized string similar to {0} requires a ElementCurveReference extracted from a Revit Element! .
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurveReferenceFailure">
            <summary>
              Looks up a localized string similar to A Curve Reference can only be obtained from an Element..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurveReferenceHint">
            <summary>
              Looks up a localized string similar to You can use the {0} or {1} to turn this Curve into a Revit Element..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.CurveRequired">
            <summary>
              Looks up a localized string similar to Please supply a curve geometry..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.DirectShapeInvalidArgument">
            <summary>
              Looks up a localized string similar to Can only create DirectShapes from Solids, Surfaces or Meshes..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.DocumentDoesNotSupportGlobalParams">
            <summary>
              Looks up a localized string similar to Document does not support global parameters..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.DocumentNotFamilyDocument">
            <summary>
              Looks up a localized string similar to Document is not a valid Family Document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.DocumentNotWorkshared">
            <summary>
              Looks up a localized string similar to Current Document is not workshared.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.Dynamo_AVF_Data_Name">
            <summary>
              Looks up a localized string similar to Dynamo Data.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.DynamoSolidToRevitBRepFailure">
            <summary>
              Looks up a localized string similar to An unexpected failure occurred when attempting to convert the solid into a Revit BRep.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.DynamoSurfaceToRevitBRepFailure">
            <summary>
              Looks up a localized string similar to An unexpected failure occurred when attempting to convert the surface into a Revit BRep.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ElementCannotBeAnnotatedError">
            <summary>
              Looks up a localized string similar to Element cannot be annotated.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ElementTypeNameNotFound">
            <summary>
              Looks up a localized string similar to There is no ElementType of the given name in the current Document.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.EmptySchedule">
            <summary>
              Looks up a localized string similar to Cannot place empty schedule on sheet..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.EmptyView">
            <summary>
              Looks up a localized string similar to Cannot place empty view on sheet..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.EndPointListEmpty">
            <summary>
              Looks up a localized string similar to End point list is empty.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.EndPointListHasNulls">
            <summary>
              Looks up a localized string similar to End point list contains null elements.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ExportOptionsArgumentException">
            <summary>
              Looks up a localized string similar to Invalid Schedule Export Options..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FaceReferenceExtractionDetail">
            <summary>
              Looks up a localized string similar to You supplied an {0}, but we could not extract a ElementFaceReference from it!.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FaceReferenceExtractionFailure">
            <summary>
              Looks up a localized string similar to {0} requires a ElementFaceReference extracted from a Revit Element! .
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FaceReferenceFailure">
            <summary>
              Looks up a localized string similar to A Face Reference can only be obtained from an Element..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FaceReferenceHint">
            <summary>
              Looks up a localized string similar to You can use the {0} to turn this Surface into a Revit Element, then extract a ElementFaceReference from it..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FamilyInstanceCreationFailure">
            <summary>
              Looks up a localized string similar to Could not create the FamilyInstance.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FamilyNotFound">
            <summary>
              Looks up a localized string similar to A family with the specified name, {0}, could not be found in the document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FamilySymbolNotFound1">
            <summary>
              Looks up a localized string similar to A FamilySymbol with the specified name does not exist in the document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FamilySymbolNotFound2">
            <summary>
              Looks up a localized string similar to A FamilySymbol with the specified name, {0}, does not exist in the Family..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FamilySymbolNotFound3">
            <summary>
              Looks up a localized string similar to A FamilySymbol with the specified name, {0}, does not exist in the document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FamilyTypeDoesNotExist">
            <summary>
              Looks up a localized string similar to Family type does not exist in the document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FileNotFound">
            <summary>
              Looks up a localized string similar to The file could not be found at: {0}.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.FloorTypeNotFound">
            <summary>
              Looks up a localized string similar to A Revit FloorType with that name could not be located in the document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.GeometryConversionFailure">
            <summary>
              Looks up a localized string similar to One or more geometries have failed to convert due to this error: .
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.GeometryObjectReferenceFailure">
            <summary>
              Looks up a localized string similar to Could not get a geometry object from the current document using the provided reference.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.GridCreationFailure">
            <summary>
              Looks up a localized string similar to A Grid Element can only be created in a Revit Project..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InputParamsMismatch">
            <summary>
              Looks up a localized string similar to The input list of parameters does not have the same number of values required by the adaptive component..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InputPointParamsMismatch">
            <summary>
              Looks up a localized string similar to The input list of points does not have the same number of values required by the adaptive component..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InputUVParamsMismatch">
            <summary>
              Looks up a localized string similar to The input list of UVs does not have the same number of values required by the adaptive component..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InstanceImportFailure">
            <summary>
              Looks up a localized string similar to Could not obtain ImportInstance from imported Element.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidCategory">
            <summary>
              Looks up a localized string similar to The selected category is not valid in this document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidColumnBaseLocation">
            <summary>
              Looks up a localized string similar to The end of the curve for creating a column should be above the start of the curve..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidElementId">
            <summary>
              Looks up a localized string similar to Id is not a valid ElementId, GUID, string or int..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidElementLocation">
            <summary>
              Looks up a localized string similar to The location of the structural element is not a valid curve..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidEndPointList">
            <summary>
              Looks up a localized string similar to Invalid end point list.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidFace">
            <summary>
              Looks up a localized string similar to The selected face cannot be used to create a wall. Please use a mass face instead..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidFilterType">
            <summary>
              Looks up a localized string similar to FilterType is not valid..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidGroupType">
            <summary>
              Looks up a localized string similar to {0} is not a valid GroupType..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidHost">
            <summary>
              Looks up a localized string similar to Element does not have a host..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidPathOfTravel">
            <summary>
              Looks up a localized string similar to Invalid PathOfTravel element..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidShapeEditor">
            <summary>
              Looks up a localized string similar to Floor Shape cannot be edited..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidStartPointList">
            <summary>
              Looks up a localized string similar to Invalid start point list..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidSwitchJoinOrder">
            <summary>
              Looks up a localized string similar to Geometry join order can only be switched when the elements are already joined..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidView">
            <summary>
              Looks up a localized string similar to Invalid view..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.InvalidWallHeight">
            <summary>
              Looks up a localized string similar to The height must be greater than 0 and less that 30000 ft.  You provided a height of {0} ft..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.MaterialNotFound">
            <summary>
              Looks up a localized string similar to A Material with the given name does not exist in the current Document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ModelTextCreationFailure">
            <summary>
              Looks up a localized string similar to ModelText Elements can only be created in a Family Document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ModelTextTypeNotFound">
            <summary>
              Looks up a localized string similar to There is no ModelTextType of the name, {0}, in the current Document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.MullionParseError">
            <summary>
              Looks up a localized string similar to Mullion should represent Revit&apos;s Mullion..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.MultipleCurvesIntroducedAfterConversion">
            <summary>
              Looks up a localized string similar to There are multiple curves converted from the input curve element..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.MultipleSurfacesIntroducedAfterConversion">
            <summary>
              Looks up a localized string similar to There are multiple surfaces converted from the input face..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NameAlreadyInUse">
            <summary>
              Looks up a localized string similar to Name already in use..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NameArgumentException">
            <summary>
              Looks up a localized string similar to You must supply a Name..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NoChildElements">
            <summary>
              Looks up a localized string similar to Element has no child Elements.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NoElementsToPurge">
            <summary>
              Looks up a localized string similar to No Elements to purge in the current document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NonIntersectingElements">
            <summary>
              Looks up a localized string similar to Elements are not intersecting.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NoParentElement">
            <summary>
              Looks up a localized string similar to Element has no parent component.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NoSharedParameterFileFound">
            <summary>
              Looks up a localized string similar to No shared parameter file found..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NoStructuralMaterialAssigned">
            <summary>
              Looks up a localized string similar to FloorType has no structural material assigned.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NotAdaptiveComponentError">
            <summary>
              Looks up a localized string similar to The FamilyInstance is not an adaptive component..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NotBuiltInCategory">
            <summary>
              Looks up a localized string similar to Element not valid. Use an element from a BuiltInCategory..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NotEnoughDataError">
            <summary>
              Looks up a localized string similar to You need at least two elements for a dimension..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NotHostElement">
            <summary>
              Looks up a localized string similar to Element is not a Host Element.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NotJoinedElements">
            <summary>
              Looks up a localized string similar to Cannot unjoin Elements that are not already joined..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NotPlanView">
            <summary>
              Looks up a localized string similar to The provided input view is not a plan view..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NotPositiveIntegerError">
            <summary>
              Looks up a localized string similar to {0} must be a positive integer.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NullInputCurvesError">
            <summary>
              Looks up a localized string similar to Some of the input curves are null..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.NumberOfDivisionsMustBeGreaterThan2">
            <summary>
              Looks up a localized string similar to The number of divisions must be greater than 2!.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.OpenInputPolyCurveError">
            <summary>
              Looks up a localized string similar to The input PolyCurve is not closed..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ParameterGroupNotFound">
            <summary>
              Looks up a localized string similar to Invalid parameter group..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ParameterNotFound">
            <summary>
              Looks up a localized string similar to No parameter found by that name..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ParameterStorageNotElement">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not an Element..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ParameterStorageNotInteger">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not an integer..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ParameterStorageNotNumber">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not a number..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ParameterStorageNotString">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not a string..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ParameterTypeNotFound">
            <summary>
              Looks up a localized string similar to Invalid parameter type..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ParameterWithoutStorageType">
            <summary>
              Looks up a localized string similar to Parameter {0} has no storage type..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.PointDataObsolete">
            <summary>
              Looks up a localized string similar to Use PointAnalysisDisplay.ByViewPointsAndValues instead..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.PointRequired">
            <summary>
              Looks up a localized string similar to Please supply a point geometry..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.PolyCurvesConversionError">
            <summary>
              Looks up a localized string similar to Revit does not support turning PolyCurves into ModelCurves. Try exploding your PolyCurve into multiple Curves..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ReferenceCurveCreationFailure">
            <summary>
              Looks up a localized string similar to Revit can only create a ReferenceCurve in a Family Document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ReferencePointCreationFailure">
            <summary>
              Looks up a localized string similar to ReferencePoint Elements can only be created in a Family Document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.RoofTypeNotFound">
            <summary>
              Looks up a localized string similar to Roof type not found..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.RoomsForLongestPathNotFound">
            <summary>
              Looks up a localized string similar to Rooms are required to compute longest Paths of Travel..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.SamplePointsMismatchError">
            <summary>
              Looks up a localized string similar to The number of sample points and number of samples must be the same..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ScheduleExportError">
            <summary>
              Looks up a localized string similar to There was an error exporting this schedule..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ScheduleTypeArgumentException">
            <summary>
              Looks up a localized string similar to Invalid Schedule Type..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.Sheet_NoViewsError">
            <summary>
              Looks up a localized string similar to Must supply more than 0 views.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.StartEndListSizeMismatch">
            <summary>
              Looks up a localized string similar to Size of start point array doesn&apos;t match size of end point array.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.StartPointListEmpty">
            <summary>
              Looks up a localized string similar to Start points list is empty.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.StartPointListHasNulls">
            <summary>
              Looks up a localized string similar to Start point list contains null elements.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.SurfaceDataObsolete">
            <summary>
              Looks up a localized string similar to Use FaceAnalysisDisplay.ByViewFacePointsAndValues instead..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.Tag_Lookup_Error">
            <summary>
              Looks up a localized string similar to A Revit face with the corresponding tag could not be found..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.TopographyNeedsThreePoints">
            <summary>
              Looks up a localized string similar to A minimum of three points is required to create a topography surface..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.TypeNotFound">
            <summary>
              Looks up a localized string similar to Type not found in document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.VectorDataObsolete">
            <summary>
              Looks up a localized string similar to Use VectorAnalysisDisplay.ByViewPointsAndVectorValues instead..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.View_ExportAsImage_Path_Invalid">
            <summary>
              Looks up a localized string similar to The supplied path is invalid..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ViewAlreadyPlacedOnSheet">
            <summary>
              Looks up a localized string similar to Cannot place view on sheet as it is already on a sheet..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ViewDoesNotSupportAnnotations">
            <summary>
              Looks up a localized string similar to View does not support annotations..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ViewExportImageError">
            <summary>
              Looks up a localized string similar to There was an error exporting the image..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ViewExportImageLockedError">
            <summary>
              Looks up a localized string similar to Attempt to override existing image failed due to file lock. Please make sure that image is not currently open in another application..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ViewPlan_ViewFamilyNotFound">
            <summary>
              Looks up a localized string similar to Specified View Type could not be found..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.ViewUnsupportedScheduleType">
            <summary>
              Looks up a localized string similar to Provided Schedule Type is not supported..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.WallTypeNotFound">
            <summary>
              Looks up a localized string similar to There is no WallType of the given name in the current Document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.DynamoBase.WrongStorageType">
            <summary>
              Looks up a localized string similar to Input value for this parameter needs to be of type {0}..
            </summary>
        </member>
        <member name="T:Orchid.Notifications.OrchidBase">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.CategoryNotFound">
            <summary>
              Looks up a localized string similar to Invalid category..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.DocumentNullError">
            <summary>
              Looks up a localized string similar to Both input documents cant be set to null.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.ElementNotFound">
            <summary>
              Looks up a localized string similar to The element could not be found in the document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.ElementNotFoundNamed">
            <summary>
              Looks up a localized string similar to An element with the specified name, {0}, could not be found in the document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.ElementTypeAmbiguity">
            <summary>
              Looks up a localized string similar to Selection of ElementType is ambiguous!.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.ElementTypeNotFound">
            <summary>
              Looks up a localized string similar to The element could not be found in the document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.ElementTypeNotFoundNamed">
            <summary>
              Looks up a localized string similar to An element with the specified name, {0}, could not be found in the document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.FamilyAmbiguity">
            <summary>
              Looks up a localized string similar to Selection of Family is ambiguous!.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.FamilyNotFound">
            <summary>
              Looks up a localized string similar to The family could not be found in the document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.FamilyTypeNotFound">
            <summary>
              Looks up a localized string similar to The family type could not be found in the document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.IFCBuiltInType">
            <summary>
              Looks up a localized string similar to The IFC setting is of built-in type and can not be changed.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.InvalidInput">
            <summary>
              Looks up a localized string similar to Input is not valid or missing..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.InvalidKeysErrorMessage">
            <summary>
              Looks up a localized string similar to Looks up a localized string similar to One or more input types are not matching. Lists as keys are not supported..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.InvalidKeysLenghtErrorMessage">
            <summary>
              Looks up a localized string similar to Looks up a localized string similar to Number of items does not match the number of keys..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.InvalidType">
            <summary>
              Looks up a localized string similar to Type is not valid..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.KindNotSupported">
            <summary>
              Looks up a localized string similar to This element kind is not supported.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.MarginNeedValue">
            <summary>
              Looks up a localized string similar to Margin need two double values as input!.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.NoSharedParameterFound">
            <summary>
              Looks up a localized string similar to shared parameter not found..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.NoSharedParameterGroupFound">
            <summary>
              Looks up a localized string similar to shared parameter group not found..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.NoSigmaBranch">
            <summary>
              Looks up a localized string similar to No Sigma branch could be found.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.NoSigmaProject">
            <summary>
              Looks up a localized string similar to No Sigma project could be found.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.NotRevitFamily">
            <summary>
              Looks up a localized string similar to Please run this command in a family document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.NotRevitProject">
            <summary>
              Looks up a localized string similar to Please run this command in a project document..
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.NoViewSheetSet">
            <summary>
              Looks up a localized string similar to No ViewSheetSet could be found.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.NoWorksetFound">
            <summary>
              Looks up a localized string similar to The document is not including worksets.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.RootFilterRule">
            <summary>
              Looks up a localized string similar to Root FilteRule cannot be set using this node.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.ToFewItems">
            <summary>
              Looks up a localized string similar to The list must contain at least two items!.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.VersionNotSupported">
            <summary>
              Looks up a localized string similar to This function is not supported by your Revit version!.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.ViewTemplateIsApplied">
            <summary>
              Looks up a localized string similar to View has a view template applied!.
            </summary>
        </member>
        <member name="P:Orchid.Notifications.OrchidBase.ViewTypeNotMoved">
            <summary>
              Looks up a localized string similar to This view type cannot be moved.
            </summary>
        </member>
        <member name="T:Orchid.Resources.Files">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Orchid.Resources.Files.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Orchid.Resources.Files.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Orchid.Resources.Files.Materials">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="M:Orchid.About.Orchid">
            <summary>
            About the package.
            </summary>
            <returns name="watch">Add a watch node!</returns>
        </member>
        <member name="M:Orchid.About.Update">
            <summary>
            Verify this version of Orchid to see if an update is available.
            </summary>
            <returns name="watch">Add a watch node!</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.All">
            <summary>
            Get all appearance assets.
            </summary>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.Duplicate(System.Object,System.String)">
            <summary>
            Duplicate appearance asset.
            </summary>
            <param name="appearanceAsset">Appearance asset as Dynamo type.</param>
            <param name="name">Name for the duplicated appearance asset.</param>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.Create(System.String,System.String,System.Boolean)">
            <summary>
            Create appearance asset.
            </summary>
            <param name="name">name.</param>
            <param name="schema">schema.</param>
            <param name="uniqueName">uniqueName.</param>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.SetInformation(System.Object,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="appearanceAsset">Appearance asset as Dynamo type.</param>
            <param name="description">description.</param>
            <param name="keywords">keywords.</param>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.SetGeneric(System.Object,DSCore.Color)">
            <summary>
            Set generic.
            </summary>
            <param name="appearanceAsset">Appearance asset as Dynamo type.</param>
            <param name="color">Color as list of integer or object.</param>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.SetBump(System.Object,System.String)">
            <summary>
            Set bump.
            </summary>
            <param name="appearanceAsset">Appearance asset as Dynamo type.</param>
            <param name="imagePath">path to file.</param>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.GetInformation(System.Object)">
            <summary>
            Get information.
            </summary>
            <param name="appearanceAsset">Appearance asset as Dynamo type.</param>
            <returns name="description">description.</returns>
            <returns name="keywords">keywords.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetRenderAppearance(System.Object,System.Boolean)">
            <summary>
            Set render appearance.
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="useRenderAppearance">Use render appearance?</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetShadingColor(System.Object,DSCore.Color)">
            <summary>
            Set shading color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="color">Color as list of integer or object.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetTransparency(System.Object,System.Int32)">
            <summary>
            Set transparency.
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="transparency">Transparency as integer.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSmoothness(System.Object,System.Int32)">
            <summary>
            Get smoothness.
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="smoothness">Smoothness as integer.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetShininess(System.Object,System.Int32)">
            <summary>
            Get shininess.
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="shininess">Shininess as integer.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.Set(System.Object,System.Boolean,DSCore.Color,System.Int32,System.Object,DSCore.Color,System.Object,DSCore.Color,System.Object,DSCore.Color,System.Object,DSCore.Color)">
            <summary>
            Set material graphics.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="useRenderAppearance">Use render appearance?</param>
            <param name="shadingColor">Color as list of integer or object.</param>
            <param name="transparency">Transparency as integer.</param>
            <param name="surfaceForegroundPattern">Pattern as string or object.</param>
            <param name="surfaceForegroundPatternColor">Color as list of integer or object.</param>
            <param name="surfaceBackgroundPattern">Pattern as string or object.</param>
            <param name="surfaceBackgroundPatternColor">Color as list of integer or object.</param>
            <param name="cutForegroundPattern">Pattern as string or object.</param>
            <param name="cutForegroundPatternColor">Color as list of integer or object.</param>
            <param name="cutBackgroundPattern">Pattern as string or object.</param>
            <param name="cutBackgroundPatternColor">Color as list of integer or object.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceForegroundPattern(System.Object,System.Object)">
            <summary>
            Set surface foreground pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="pattern">Pattern as string or object.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceForegroundPatternColor(System.Object,DSCore.Color)">
            <summary>
            Set surface foreground pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="color">Color as list of integer or object.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceBackgroundPattern(System.Object,System.Object)">
            <summary>
            Set surface background pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="pattern">Pattern as string or object.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceBackgroundPatternColor(System.Object,DSCore.Color)">
            <summary>
            Set surface background pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="color">Color as list of integer or object.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutForegroundPattern(System.Object,System.Object)">
            <summary>
            Set cut foreground pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="pattern">Pattern as string or object.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutForegroundPatternColor(System.Object,DSCore.Color)">
            <summary>
            Set cut foreground pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="color">Color as list of integer or object.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutBackgroundPattern(System.Object,System.Object)">
            <summary>
            Set cut background pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="pattern">Pattern as string or object.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutBackgroundPatternColor(System.Object,DSCore.Color)">
            <summary>
            Set cut background pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="color">Color as list of integer or object.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetRenderAppearance(System.Object)">
            <summary>
            Get render appearance.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="boolean">Whether render appearance is used.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetShadingColor(System.Object)">
            <summary>
            Get shading color.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Color">Color as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetTransparency(System.Object)">
            <summary>
            Get transparency.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="integer">Transparency as integer.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSmoothness(System.Object)">
            <summary>
            Get smoothness.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="integer">Smoothness as integer.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetShininess(System.Object)">
            <summary>
            Get shininess.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="integer">Shininess as integer.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.Get(System.Object)">
            <summary>
            Get material graphics.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="UseRenderAppearance">Whether render appearance is used.</returns>
            <returns name="ShadingColor">Color as Dynamo type.</returns>
            <returns name="Transparency">Transparency as integer.</returns>
            <returns name="surfaceForegroundPattern">Pattern as Dynamo type.</returns>
            <returns name="surfaceForegroundPatternColor">Color as Dynamo type.</returns>
            <returns name="surfaceBackgroundPattern">Pattern as Dynamo type.</returns>
            <returns name="surfaceBackgroundPatternColor">Color as Dynamo type.</returns>
            <returns name="cutForegroundPattern">Pattern as Dynamo type.</returns>
            <returns name="cutForegroundPatternColor">Color as Dynamo type.</returns>
            <returns name="cutBackgroundPattern">Pattern as Dynamo type.</returns>
            <returns name="cutBackgroundPatternColor">Color as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSurfaceForegroundPattern(System.Object)">
            <summary>
            Get surface foreground pattern.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Pattern">Pattern as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSurfaceForegroundPatternColor(System.Object)">
            <summary>
            Get surface foreground pattern color.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Color">Color as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSurfaceBackgroundPattern(System.Object)">
            <summary>
            Get surface background pattern.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Pattern">Pattern as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSurfaceBackgroundPatternColor(System.Object)">
            <summary>
            Get surface background pattern color.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Color">Color as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetCutForegroundPattern(System.Object)">
            <summary>
            Get cut foreground pattern.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Pattern">Pattern as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetCutForegroundPatternColor(System.Object)">
            <summary>
            Get cut foreground pattern color.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Color">Color as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetCutBackgroundPattern(System.Object)">
            <summary>
            Get cut background pattern.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Pattern">Pattern as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetCutBackgroundPatternColor(System.Object)">
            <summary>
            Get cut background pattern color.
            Note: This node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Color">Color as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Create(System.String)">
            <summary>
            Create material.
            </summary>
            <param name="name">The material name.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Duplicate(System.Object,System.String)">
            <summary>
            Duplicate material.
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="name">The material name to duplicate.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetAsset(System.Object,System.String,System.Object)">
            <summary>
            Set asset property.
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="aspect">Material aspect as string or object.</param>
            <param name="propertySet">Asset property set as string or object.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetAsset(System.Object,System.Object)">
            <summary>
            Set asset property.
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="appearanceAsset">Appearance asset as Dynamo type.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetCategory(System.Object,System.String)">
            <summary>
            Set material category.
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="name">The material category name to set.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetClass(System.Object,System.String)">
            <summary>
            Set material class.
            </summary>
            <param name="material">Material as string or object.</param>
            <param name="name">The material class name to set.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.GetCategory(System.Object)">
            <summary>
            Get material category.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="string">The material category name.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.GetClass(System.Object)">
            <summary>
            Get material class.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="string">The material class name.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.All(Orchid.RevitProject.Common.Document)">
            <summary>
            Get all materials in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.All">
            <summary>
            Get all materials in document.
            </summary>
            <returns name="Material">Material as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Asset(System.Object)">
            <summary>
            Get material assets.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Appearance">Appearance asset as Dynamo type.</returns>
            <returns name="Physical">Physical asset as Dynamo type.</returns>
            <returns name="Thermal">Thermal asset as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.AppearanceAsset(System.Object)">
            <summary>
            Get material appearance assets.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Asset">Asset as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.PhysicalAsset(System.Object)">
            <summary>
            Get material physical assets.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Asset">Asset as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.ThermalAsset(System.Object)">
            <summary>
            Get material thermal assets.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Asset">Asset as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.AssetParameter(System.Object)">
            <summary>
            Get material asset parameters.
            Note: If the dynamo parameter fail, then is the parameter name and value returned.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Appearance">Appearance asset parameter as Dynamo type.</returns>
            <returns name="Physical">Physical asset parameter as Dynamo type.</returns>
            <returns name="Thermal">Thermal asset parameter as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Parameter(System.Object)">
            <summary>
            Get material parameters.
            </summary>
            <param name="material">Material as string or object.</param>
            <returns name="Parameter">Parameter as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Density(System.Object)">
            <summary>
            Get material asset as physical and thermal density in SI unit (kg/m3).
            </summary>
            <param name="material">List of material.</param>
            <returns name="Physical">List of physical density.</returns>
            <returns name="Thermal">List of thermal density.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.All">
            <summary>
            Get all physical property set (asset).
            </summary>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.Duplicate(System.Object,System.String)">
            <summary>
            Duplicate physical property set (asset).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="name">Name for the duplicated physical property set.</param>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.Create(System.String,System.String,System.Boolean)">
            <summary>
            Create physical asset and property set.
            </summary>
            <param name="name">Name as string.</param>
            <param name="type"></param>
            <param name="uniqueName"></param>
            <returns name="PropertySet">Thermal property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetInformation(System.Object,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="description"></param>
            <param name="keywords"></param>
            <param name="subclass"></param>
            <param name="source"></param>
            <param name="sourceUrl"></param>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetBehavior(System.Object,System.String)">
            <summary>
            Set behavior.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="behavior"></param>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetBasicThermal(System.Object,System.Double)">
            <summary>
            Set basic thermal.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="expansionCoefficient"></param>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetBasicThermalByXYZ(System.Object,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Set basic thermal.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="expansionCoefficient">XYZ as Dynamo point.</param>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetMechanical(System.Object,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="density"></param>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetMechanical(System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="youngModulus"></param>
            <param name="poissonRatio"></param>
            <param name="shearModulus"></param>
            <param name="density"></param>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetMechanicalByXYZ(System.Object,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="youngModulus">XYZ as Dynamo point.</param>
            <param name="poissonRatio">XYZ as Dynamo point.</param>
            <param name="shearModulus">XYZ as Dynamo point.</param>
            <param name="density"></param>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetStrength(System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Set strength.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="yieldStress"></param>
            <param name="tensileStrength"></param>
            <param name="thermalTreated"></param>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetStrengthExtended(System.Object,System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Set strength (extended).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="species"></param>
            <param name="grade"></param>
            <param name="bending"></param>
            <param name="parallelCompression"></param>
            <param name="perpendicularCompression"></param>
            <param name="parallelShear"></param>
            <param name="tensionParallel"></param>
            <param name="tensionPerpendicular"></param>
            <param name="averageModulus"></param>
            <param name="construction"></param>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetConcrete(System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Set concrete.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="compression"></param>
            <param name="shearStrengthReduction"></param>
            <param name="lightweight"></param>
            <returns name="PropertySet">Physical property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetInformation(System.Object)">
            <summary>
            Get information.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="Description">Description.</returns>
            <returns name="Keywords">Keywords.</returns>
            <returns name="Subclass">Subclass.</returns>
            <returns name="Source">Source.</returns>
            <returns name="SourceUrl">SourceUrl.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetBehavior(System.Object)">
            <summary>
            Get behavior.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="Behavior">Behavior.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetExpansionCoefficient(System.Object)">
            <summary>
            Get expansion coefficient (basic thermal).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="ExpansionCoefficient">ExpansionCoefficient.</returns>
            <returns name="ExpansionCoefficientX">ExpansionCoefficientX.</returns>
            <returns name="ExpansionCoefficientY">ExpansionCoefficientY.</returns>
            <returns name="ExpansionCoefficientZ">ExpansionCoefficientZ.</returns>
            <returns name="ExpansionCoefficient1">ExpansionCoefficient1.</returns>
            <returns name="ExpansionCoefficient2">ExpansionCoefficient2.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetDensity(System.Object)">
            <summary>
            Get density (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="Density">Density.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetYoungModulus(System.Object)">
            <summary>
            Get young modulus (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="YoungModulus">YoungModulus.</returns>
            <returns name="YoungModulusX">YoungModulusX.</returns>
            <returns name="YoungModulusY">YoungModulusY.</returns>
            <returns name="YoungModulusZ">YoungModulusZ.</returns>
            <returns name="YoungModulus1">YoungModulus1.</returns>
            <returns name="YoungModulus2">YoungModulus2.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetPoissonRatio(System.Object)">
            <summary>
            Get poisson ratio (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="PoissonRatio">PoissonRatio.</returns>
            <returns name="PoissonRatioX">PoissonRatioX.</returns>
            <returns name="PoissonRatioY">PoissonRatioY.</returns>
            <returns name="PoissonRatioZ">PoissonRatioZ.</returns>
            <returns name="PoissonRatio12">PoissonRatio12.</returns>
            <returns name="PoissonRatio23">PoissonRatio23.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetShearModulus(System.Object)">
            <summary>
            Get shear modulus (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="ShearModulus">ShearModulus.</returns>
            <returns name="ShearModulusX">ShearModulusX.</returns>
            <returns name="ShearModulusY">ShearModulusY.</returns>
            <returns name="ShearModulusZ">ShearModulusZ.</returns>
            <returns name="ShearModulus12">ShearModulus12.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetStrength(System.Object)">
            <summary>
            Get strength.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="YieldStress">YieldStress.</returns>
            <returns name="TensileStrength">TensileStrength.</returns>
            <returns name="ThermalTreated">ThermalTreated.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetStrengthExtended(System.Object)">
            <summary>
            Get strength (extended).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="Species">Species.</returns>
            <returns name="Grade">Grade.</returns>
            <returns name="Bending">Bending.</returns>
            <returns name="ParallelCompression">ParallelCompression.</returns>
            <returns name="PerpendicularCompression">PerpendicularCompression.</returns>
            <returns name="ParallelShear">ParallelShear.</returns>
            <returns name="TensionParallel">TensionParallel.</returns>
            <returns name="TensionPerpendicular">TensionPerpendicular.</returns>
            <returns name="AverageModulus">AverageModulus.</returns>
            <returns name="Construction">Construction.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetConcrete(System.Object)">
            <summary>
            Get concrete.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="Compression">Compression.</returns>
            <returns name="ShearStrengthReduction">ShearStrengthReduction.</returns>
            <returns name="Lightweight">Lightweight.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.All">
            <summary>
            Get all thermal property set (asset).
            </summary>
            <returns name="PropertySet">Thermal property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.Duplicate(System.Object,System.String)">
            <summary>
            Duplicate thermal property set (asset).
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <param name="name">Name for the duplicated thermal property set.</param>
            <returns name="PropertySet">Thermal property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.Create(System.String,System.String,System.Boolean)">
            <summary>
            Create thermal asset and property set.
            </summary>
            <param name="name">Name as string.</param>
            <param name="type"></param>
            <param name="uniqueName"></param>
            <returns name="PropertySet">Thermal property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.SetInformation(System.Object,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <param name="description"></param>
            <param name="keywords"></param>
            <param name="subclass"></param>
            <param name="source"></param>
            <param name="sourceUrl"></param>
            <returns name="PropertySet">Thermal property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.SetProperties(System.Object,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set properties. Note: Can only be used for the thermal type Solid!
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <param name="transmitsLight"></param>
            <param name="behavior"></param>
            <param name="thermalConductivity"></param>
            <param name="specificHeat"></param>
            <param name="density"></param>
            <param name="emissivity"></param>
            <param name="permeability"></param>
            <param name="porosity"></param>
            <param name="reflectivity"></param>
            <param name="electricalResistivity"></param>
            <returns name="PropertySet">Thermal property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.SetBasicThermal(System.Object,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set basic thermal. Note: Can only be used for the thermal type Gas or Liquid!
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <param name="thermalConductivity"></param>
            <param name="specificHeat"></param>
            <param name="density"></param>
            <param name="emissivity"></param>
            <param name="gasViscosity"></param>
            <param name="compressibility"></param>
            <returns name="PropertySet">Thermal property set as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.GetInformation(System.Object)">
            <summary>
            Get information.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <returns name="Description">Description.</returns>
            <returns name="Keywords">Keywords.</returns>
            <returns name="Subclass">Subclass.</returns>
            <returns name="Source">Source.</returns>
            <returns name="SourceUrl">SourceUrl.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.GetProperties(System.Object)">
            <summary>
            Get properties.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <returns name="TransmitsLight">TransmitsLight.</returns>
            <returns name="Behavior">Behavior.</returns>
            <returns name="ThermalConductivity">ThermalConductivity.</returns>
            <returns name="SpecificHeat">SpecificHeat.</returns>
            <returns name="Density">Density.</returns>
            <returns name="Emissivity">Emissivity.</returns>
            <returns name="Permeability">Permeability.</returns>
            <returns name="Porosity">Porosity.</returns>
            <returns name="Reflectivity">Reflectivity.</returns>
            <returns name="ElectricalResistivity">ElectricalResistivity.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.GetBasicThermal(System.Object)">
            <summary>
            Get basic thermal.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <returns name="ThermalConductivity">ThermalConductivity.</returns>
            <returns name="SpecificHeat">SpecificHeat.</returns>
            <returns name="Density">Density.</returns>
            <returns name="Emissivity">Emissivity.</returns>
            <returns name="GasViscosity">GasViscosity.</returns>
            <returns name="Compressibility">Compressibility.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Form.Solid(Revit.Elements.Element)">
            <summary>
            Get Dynamo solid from solid and void form.
            </summary>
            <param name="form">Form element as Dynamo type.</param>
            <returns name="Solid">Solid element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Form.OcSolid(Revit.Elements.Element)">
            <summary>
            Get Orchid solid from solid and void form.
            </summary>
            <param name="form">Form element as Dynamo type.</param>
            <returns name="OcSolid">Solid element as Orchid type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Form.Get">
            <summary>
            Get Form element in current document.
            </summary>
            <returns name="Form">Form element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Form.Get(Orchid.RevitProject.Common.Document)">
            <summary>
            Get Form element in document.
            </summary>
            <param name="document">Document (rvt) as Orchid document.</param>
            <returns name="Form">Form element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Form.ElementIntersect(Revit.Elements.Element)">
            <summary>
            Get elements intersecting with a solid.
            </summary>
            <param name="form">Form element as Dynamo type.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Form.ElementIntersect(Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Filter elements intersecting with a solid.
            </summary>
            <param name="form">Form element as Dynamo type.</param>
            <param name="elements">Elements to examine.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.OcSolid.ToString">
            <summary>
            Form string override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orchid.Common.Geometry.OcSolid.ElementIntersect(Orchid.Common.Geometry.OcSolid)">
            <summary>
            Get elements intersecting with a form.
            </summary>
            <param name="ocSolid">Solid as Orchid type.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.OcSolid.ElementIntersect(Orchid.Common.Geometry.OcSolid,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Filter elements intersecting with a form.
            </summary>
            <param name="ocSolid">Solid as Orchid type.</param>
            <param name="elements">Elements to examine.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Solid.ToRevitType(Autodesk.DesignScript.Geometry.Solid)">
            <summary>
            Convert Autodesk Revit solid to Dynamo Revit solid.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <returns name="Solid">Solid as Revit type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Solid.ToDynamoType(Autodesk.Revit.DB.Solid)">
            <summary>
            Convert Dynamo Revit solid to Autodesk Revit solid.
            </summary>
            <param name="solid">Solid as Revit type.</param>
            <returns name="Solid">Solid as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Solid.Union(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Solid})">
            <summary>
            Union list of solids to one solid.
            </summary>
            <param name="solid">List of solids as Dynamo type.</param>
            <returns name="Solid">Solid as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Solid.Copy(Autodesk.DesignScript.Geometry.Solid)">
            <summary>
            Copy solid, by cloning source solid faces into new solid.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <returns name="Solid">Copied Solid as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Solid.Copy(Autodesk.DesignScript.Geometry.Solid,System.Int32)">
            <summary>
            Copy amount of solid, by cloning source solid faces into new solid.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <param name="amount">Amount og solids to copy</param>
            <returns name="Solid">List of copied solids as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Solid.ElementIntersect(Autodesk.DesignScript.Geometry.Solid)">
            <summary>
            Get elements intersecting with a solid.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Solid.ElementIntersect(Autodesk.DesignScript.Geometry.Solid,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Filter elements intersecting with a solid.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <param name="elements">Elements to examine.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.BoundingBox.ElementIntersect(Autodesk.DesignScript.Geometry.BoundingBox,System.Double)">
            <summary>
            Get elements intersecting with a boundingbox.
            </summary>
            <param name="boundingBox">BoundingBox as Dynamo type.</param>
            <param name="tolerence">Set a tolerence as double value. 
            Positive values gives a gap/margin to the boundingbox, while negative
            values set a overlap/oversize to the boundingbox.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.BoundingBox.ElementIntersect(Autodesk.DesignScript.Geometry.BoundingBox,System.Collections.Generic.List{Revit.Elements.Element},System.Double)">
            <summary>
            Filter elements intersecting with a boundingbox.
            </summary>
            <param name="boundingBox">BoundingBox as Dynamo type.</param>
            <param name="elements">Elements to examine.</param>
            <param name="tolerence">Set a tolerence as double value. 
            Positive values gives a gap/margin to the boundingbox, while negative
            values set a overlap/oversize to the boundingbox.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.BoundingBox.PointInside(Autodesk.DesignScript.Geometry.BoundingBox,Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Filter point inside a boundingbox.
            </summary>
            <param name="boundingBox">BoundingBox as Dynamo type.</param>
            <param name="point">Point as Dynamo type.</param>
            <param name="tolerence">Set a tolerence as double value. 
            Positive values gives a gap/margin to the boundingbox, while negative
            values set a overlap/oversize to the boundingbox.</param>
            <returns name="boolean">True if boundingbox contains point.</returns>
        </member>
        <member name="M:Orchid.Common.Geometry.Point.Reverse(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Get the reverse of the point. 
            Essentially this negates the X, Y, and Z components of the Point.
            </summary>
            <param name="point">Point as Dynamo type.</param>
            <returns name="Point">Point as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.Common.Print.PaperSize(System.String)">
            <summary>
            Get printer paper sizes.
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected.</param>
            <returns name="PaperSize">Paper sizes as string values.</returns>
        </member>
        <member name="M:Orchid.Common.Print.ByView(System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{Revit.Elements.Element},System.Object)">
            <summary>
            Print by view. --> Note: If combined into one file is changed
            in this session, then the dynamo graph needs to be reloaded!
            Furthermore, if print to file is selected, then please check windows
            printer settings to verify if print to file is supported!
            Adobe PDF is NOT preset to do this!
            </summary>
            <param name="printer">Printer name as string. 
            If value is not set is default printer selected.</param>
            <param name="combine">Combine into one file? (Print to file must be set to true)</param>
            <param name="file">Print to file?</param>
            <param name="fileName">Give a valid path and filename for the print output.
            If value is not set is the user asked later!</param>
            <param name="printRange">Print range as string.</param>
            <param name="view">View to print as Dynamo type (default: Active View).</param>
            <param name="printSetting">Printer setting as string or Dynamo type.</param>
        </member>
        <member name="M:Orchid.Common.Print.ByViewSheetSet(System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Revit.Elements.Element,System.Object)">
            <summary>
            Print by view sheet set. --> Note: If combined into one file is changed
            in this session, then the dynamo graph needs to be reloaded!
            Furthermore, if print to file is selected, then please check windows
            printer settings to verify if print to file is supported!
            Adobe PDF is NOT preset to do this!
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected.</param>
            <param name="combine">Combine into one file? (Print to file must be set to true)</param>
            <param name="file">Print to file?</param>
            <param name="fileName">Give a valid path and filename for the print output. If value is not set is the user asked later!</param>
            <param name="viewSheetSet">ViewSheetSet to print as Dynamo type.</param>
            <param name="printSetting">Printer setting as string or Dynamo type.</param>
        </member>
        <member name="M:Orchid.Common.Print.CreateSetting(System.String,System.String,System.String,System.String,System.String,System.String,System.Double[],System.String,System.Int32)">
            <summary>
            Set print setting.
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected.</param>
            <param name="name">name to create for the print setting.</param>
            <param name="paperZize">Paper size as string. If value is not set is default paper size selected.</param>
            <param name="pageOrientation">Page orientation as string.</param>
            <param name="paperPlacement">Paper placement.</param>
            <param name="marginType">Print margin type.</param>
            <param name="margin">Print margin value as double.</param>
            <param name="zoomType">Zoom type as string.</param>
            <param name="zoom">Zoom value as integer.</param>       
            <returns name="PrintSetting">Print setting.</returns>
        </member>
        <member name="M:Orchid.Common.Print.ChangeSetting(System.String,System.Object,System.String,System.String,System.String,System.String,System.Double[],System.String,System.Int32)">
            <summary>
            Change print setting.
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected.</param>
            <param name="printSetting">printer setting as string or Dynamo type.</param>
            <param name="paperZize">Paper size as string. If value is not set is default paper size selected.</param>
            <param name="pageOrientation">Page orientation as string.</param>
            <param name="paperPlacement">Paper placement.</param>
            <param name="marginType">Print margin type.</param>
            <param name="margin">Print margin value as double.</param>
            <param name="zoomType">Zoom type as string.</param>
            <param name="zoom">Zoom value as integer.</param>       
            <returns name="PrintSetting">Print setting.</returns>
        </member>
        <member name="M:Orchid.Common.Print.DeleteSetting(System.Object)">
            <summary>
            Delete print setting.
            </summary>
            <param name="printSetting">printer setting as string or Dynamo type.</param>
        </member>
        <member name="M:Orchid.Common.Print.SetOptions(System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Set printer options.
            </summary>
            <param name="printSetting">printer setting as string or Dynamo type.</param>
            <param name="viewLinksinBlue">View links in blue? (Color prints only)</param>
            <param name="hideReforWorkPlanes">Hide ref/work planes?</param>
            <param name="hideUnreferencedViewTags">Hide unreferenced view tags?</param>
            <param name="maskCoincidentLines">Region edges mask coincident lines?</param>
            <param name="hideScopeBoxes">Hide scope boxes?</param>
            <param name="hideCropBoundaries">Hide crop boundaries?</param>
            <param name="replaceHalftoneWithThinLines">Replace halftone with thin lines?</param>
            <param name="hiddenLineViews">Hidden line views: Remove lines using vector or raster.</param>
            <param name="rasterQuality">Appearance: Raster quality.</param>
            <param name="colorDepth">Appearance: Colors.</param>
            <returns name="PrintSetting">Print setting.</returns>
        </member>
        <member name="M:Orchid.Common.Revit.Format">
            <summary>
            Get the Revit format indicator (the major release version).
            </summary>
            <returns name="string">Format number.</returns>
        </member>
        <member name="M:Orchid.Common.Revit.Version">
            <summary>
            Get the Revit version number inclusive the subversion number.
            </summary>
            <returns name="string">Version number.</returns>
        </member>
        <member name="M:Orchid.Common.Revit.VersionBuild">
            <summary>
            Get the Revit version build.
            </summary>
            <returns name="string">Version build.</returns>
        </member>
        <member name="M:Orchid.Common.Revit.Username">
            <summary>
            Get the Revit user name.
            </summary>
            <returns name="string">User name.</returns>
        </member>
        <member name="M:Orchid.Common.File.Info(System.String)">
            <summary>
            Get file(s) info.
            </summary>
            <param name="file">File incl. path.</param>
            <returns name="info">File info.</returns>
        </member>
        <member name="M:Orchid.Common.File.FromPath(System.String)">
            <summary>
            Get file from a path.
            </summary>
            <param name="path">Path to the file.</param>
            <returns name="file">File object.</returns>
        </member>
        <member name="M:Orchid.Common.File.Rename(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Rename file.
            </summary>
            <param name="directory">The directory path as string.</param>
            <param name="extension">The file extension.</param>
            <param name="sourceName">The name of the source file.</param>
            <param name="targetName">The name of the target file.</param>
            <returns name="file">File.</returns>
        </member>
        <member name="M:Orchid.Common.File.MergePDF(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Merge list of PDF documents.
            </summary>
            <param name="documents">List of PDF documents to be merged.</param>
            <param name="filePath">Give a valid path for the merged PDF output.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.Common.Clipboard.CopyTo(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Copy object to Clipboard. Can copy objects from a 1D list, but not from 2D...nD!
            If List Level is used, then will the last item be available in the clipboard.
            </summary>
            <param name="object">Object(s) to copy.</param>
            <param name="id">Add element id (if exists) to output?</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.Common.DataStream.Await(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Await a data stream before passing another data stream.
            </summary>
            <param name="pass">Data to pass.</param>
            <param name="waitFor">Data object to wait for.</param>
            <returns name="pass">Passed data.</returns>
        </member>
        <member name="M:Orchid.Common.DataStream.Circut(System.Collections.ICollection,System.Boolean)">
            <summary>
            Set a state (true/false) to pass a data stream in a circut.
            </summary>
            <param name="pass">Data to pass.</param>
            <param name="state">Set a bool value for the state!</param>
            <returns name="pass">Passed data.</returns>
        </member>
        <member name="M:Orchid.Common.DataStream.Timer(System.Collections.ICollection,System.Nullable{System.DateTime})">
            <summary>
            Measure the time via passing a data stream to verify computational processing.
            </summary>
            <param name="pass">Data to pass.</param>
            <param name="dateTime">Input date time.</param>
            <returns name="pass">Passed data.</returns>
            <returns name="DateTime">Output date time.</returns>
            <returns name="TimeSpan">Time span (time elapsed).</returns>
        </member>
        <member name="P:Orchid.Common.Directory.Current">
            <summary>
            Get current directory.
            </summary>
            <returns name="directory">Directory.</returns>
        </member>
        <member name="M:Orchid.Common.Directory.FromPath(System.String)">
            <summary>
            Get a directory object from a path.
            </summary>
            <param name="path">Path to the directory.</param>
            <returns name="directory">Directory object.</returns>
        </member>
        <member name="M:Orchid.Common.Directory.Contents(System.String,System.String,System.Boolean)">
            <summary>
            Get the files in a directory and its subdirectories.
            Use string for extension type, default is * for all files!
            If files are are readonly but not hidden, are they included.
            If files are both hidden or readonly files
            (and thereby system files) are they left out.
            </summary>
            <param name="directory">Directory to get contents from.</param>
            <param name="searchString">Search string used to filter results.</param>
            <param name="deepSearch">Apply searching in all subfolders?</param>
            <returns name="file">File.</returns>
        </member>
        <member name="M:Orchid.Common.List.AllTrue(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Determines if all items in the given list has a true value.
            </summary>
            <param name="list">List to be checked whether all items are true!?</param>
            <returns name="boolean">Whether all items are true.</returns>
            <search>test,all,true,istrue</search>
        </member>
        <member name="M:Orchid.Common.List.AnyTrue(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Determines if any items in the given list has a true value.
            </summary>
            <param name="list">List to be checked whether any items are true!?</param>
            <returns name="boolean">Whether any items are true.</returns>
            <search>test,any,true,istrue</search>
        </member>
        <member name="M:Orchid.Common.List.AllFalse(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Determines if all items in the given list has a false value.
            </summary>
            <param name="list">List to be checked whether all items are false!?</param>
            <returns name="boolean">Whether all items are false.</returns>
            <search>test,all,false,isfalse</search>
        </member>
        <member name="M:Orchid.Common.List.AnyFalse(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Determines if any items in the given list has a false value.
            </summary>
            <param name="list">List to be checked whether any items are false!?</param>
            <returns name="boolean">Whether all items are false.</returns>
            <search>test,any,false,isfalse</search>
        </member>
        <member name="M:Orchid.Common.List.Search(System.Collections.IEnumerable)">
            Search values, send default if values not exist
        </member>
        <member name="M:Orchid.Common.List.CleanUtil(System.Collections.IList,System.Collections.IList)">
            Cleaning nD list
        </member>
        <member name="M:Orchid.Common.List.ReplaceUtil(System.Collections.IList,System.Collections.IList,System.Object)">
            Replacing nD list
        </member>
        <member name="M:Orchid.Common.List.Clean(System.Collections.IList,System.Collections.IList)">
            <summary>
            Clean nD list.
            </summary>
            <param name="list">List.</param>
            <param name="searchFor">Item(s) to search for.</param>
            <returns name="list">List.</returns>
        </member>
        <member name="M:Orchid.Common.List.Replace(System.Collections.IList,System.Collections.IList,System.Object)">
            <summary>
            Replace item in nD list.
            </summary>
            <param name="list">List.</param>
            <param name="searchFor">Item(s) to search for.</param>
            <param name="replaceWith">Replacement value.</param>
            <returns name="list">List.</returns>
        </member>
        <member name="M:Orchid.Common.List.Sort(System.Collections.IList,System.Boolean)">
            <summary>
            Sort elements using the PC 'locale'. Sort elements recursively
            preserving elements types and elements structure.
            </summary>
            <param name="list">List of values.</param>
            <param name="descending">Return the list in descending order?</param>
            <returns name="list">List.</returns>
        </member>
        <member name="M:Orchid.Common.List.SortNatural(System.Collections.IList,System.Boolean)">
            <summary>
            Sort elements using the PC 'locale'. Sort elements recursively
            preserving elements types and elements structure.Sort elements in natural
            sort order by splitting digits from string and add leading zeros.
            http://en.wikipedia.org/wiki/Natural_sort_order
            </summary>
            <param name="list">List of values.</param>
            <param name="descending">Return the list in descending order?</param>
            <returns name="list">List.</returns>
        </member>
        <member name="M:Orchid.Common.List.GroupBySortedKey(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>
            Group items into sublists based on their like sorted key values.
            </summary>
            <param name="list">List of items to group as sublists.</param>
            <param name="keys">Key values, one per item in the input list, used for sorting and grouping the items.</param>
            <param name="descending">Return the list in descending order?</param>
            <returns name="groups">List of sublists, with items grouped by like sorted key values.</returns>
            <returns name="unique keys">sorted key value corresponding to each group.</returns>
            <search>list;key;sort;group;sortbykey;groupbykey;order</search>
        </member>
        <member name="M:Orchid.Common.List.GroupBySortedKey(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Group items and keys into sublists based on their sorted unique key values.
            </summary>
            <param name="items">List of items to group as sublists.</param>
            <param name="keys">List of keys to group as sublists, one key per item in the input list.</param>
            <param name="sortedKeys">Sorted unique keys, used for grouping the items.</param>
            <returns name="grouped items">List of sublists, with items grouped by the sorted key values.</returns>
            <returns name="grouped keys">List of sublists, with keys grouped by the sorted key values.</returns>
            <search>list;group;sort;key;sorted;groupby;order</search>
        </member>
        <member name="M:Orchid.Common.List.SortGroupByKey(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Sort and group items into sub-lists based on their like key values.
            </summary>
            <param name="list">List of items to group as sublists.</param>
            <param name="keys">Key values, one per item in the input list, used for grouping the items.</param>
            <param name="sortedKeys">Sorted unique keys, used for grouping the items by their key.</param>
            <returns name="groups">List of sublists, with items grouped by like key values.</returns>
            <returns name="unique keys">key value corresponding to each group.</returns>
            <search>list;sort;group;sortbykey;groupbykey;</search>
        </member>
        <member name="M:Orchid.Common.List.IndexOf(System.Collections.IList,System.Object)">
            <summary>
            Returns the index (the full path) of the member in nD list.
            </summary>
            <param name="list">List of values.</param>
            <param name="item">the item.</param>
            <returns name="integer">List of indicies.</returns>
        </member>
        <member name="M:Orchid.Common.List.GetItemAtIndex(System.Collections.IList,System.Collections.IList)">
            <summary>
            Get an item from the given list that's located at the specified index (the full path) in nD list.
            </summary>
            <param name="list">List to fetch an item from.</param>
            <param name="index">index of the item to be fetched.</param>
            <returns name="item">item in the list at the given index.</returns>
        </member>
        <member name="M:Orchid.Common.List.Insert(System.Collections.IList,System.Object,System.Collections.IList)">
            <summary>
            Insert an item from the given list that's located at the specified index (the full path) in nD list.
            </summary>
            <param name="list">List to fetch an item from.</param>
            <param name="item">the item to insert.</param>
            <param name="index">index of the item to be fetched.</param>
            <returns name="list">List.</returns>
        </member>
        <member name="M:Orchid.Common.List.RemoveItemAtIndex(System.Collections.IList,System.Collections.IList)">
            <summary>
            Remove an item from the given list that's located at the specified index (the full path) in nD list.
            </summary>
            <param name="list">List to fetch an item from.</param>
            <param name="index">index of the item to be fetched.</param>
            <returns name="list">List.</returns>
        </member>
        <member name="M:Orchid.Common.List.ReplaceItemAtIndex(System.Collections.IList,System.Collections.IList,System.Object)">
            <summary>
            Replace an item from the given list that's located at the specified index (the full path) in nD list.
            </summary>
            <param name="list">List to replace an item in.</param>
            <param name="index">index of the item to be replaced.</param>
            <param name="item">the item to insert.</param>
            <returns name="list">List.</returns>
        </member>
        <member name="M:Orchid.Common.List.FilterByKey(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Filter two list items based on common key values.
            </summary>
            <param name="list1">Items from list 1.</param>
            <param name="key1">Keys from list 1.</param>
            <param name="list2">Items from list 2.</param>
            <param name="key2">Keys from list 2.</param>
            <returns name="listA">ListA.</returns>
            <returns name="listB">ListB.</returns>
            <returns name="key">Key.</returns>
        </member>
        <member name="M:Orchid.Common.List.SummationByKey(System.Collections.IList,System.Collections.IList)">
            <summary>
            Summarize items and group by key values.
            </summary>
            <param name="list">List of items as int and double to group and summarize as sublists.</param>
            <param name="keys">Key values, one per item in the input list, used for grouping the items.</param>
            <returns name="summarized groups">List of sublist, with items grouped and summarized by like key values.</returns>
            <returns name="unique keys">key value corresponding to each group.</returns>
            <search>list;group;summarize;summationbykey;</search>
        </member>
        <member name="M:Orchid.Common.List.GroupByEqual(System.Collections.IList)">
            <summary>
            Group items into sub-lists based on being equal.
            </summary>
            <param name="list">List of items to group as sublists.</param>
            <returns name="groups">List of sublist, with items grouped by like key values.</returns>
            <returns name="unique keys">key value corresponding to each group.</returns>
            <search>list;group;equal;groupbyequal;</search>
        </member>
        <member name="M:Orchid.Common.List.IncrementalCount(System.Collections.IList)">
            <summary>
            Count list items and return a list of incremented integers. 
            Note: The incremental count function does not fail null items
            or empty lists, both will be counted as valid items!
            </summary>
            <param name="list">List of items.</param>
            <returns name="list">List of incremented integers.</returns>
        </member>
        <member name="M:Orchid.Common.Math.Random(System.Int32)">
            <summary>
            Generates a random double in the given range (0, x).
            </summary>
            <param name="range">Range to slice the random numbers into.</param>
            <returns name="number">Random number in the given range (0, x).</returns>
        </member>
        <member name="M:Orchid.Common.Math.RandomList(System.Int32,System.Int32)">
            <summary>
            Produces a list containing the given amount of random doubles in the given range (0, x).
            </summary>
            <param name="amount">Amount of random numbers the result list will contain.</param>
            <param name="range">Range to slice the random numbers into.</param>
            <returns name="number">List of random numbers in the given range (0, x).</returns>
        </member>
        <member name="M:Orchid.Common.Number.ToDouble(System.Int32)">
            <summary>
            Convert numeric value to double.
            </summary>
            <param name="number">number as integer.</param>
            <returns name="double">number as double.</returns>
        </member>
        <member name="M:Orchid.Common.Number.ToInteger(System.Double)">
            <summary>
            Convert numeric value to integer.
            </summary>
            <param name="number">number as double.</param>
            <returns name="integer">number as integer.</returns>
        </member>
        <member name="M:Orchid.Common.Object.Hashing(System.Object)">
            <summary>
            Input hassing value.
            Note: Hasing should not be mix up with guid or unique id!
            https://en.wikipedia.org/wiki/Hash_function
            </summary>
            <param name="object">An object.</param>
            <returns name="integer">Hashing value.</returns>
        </member>
        <member name="M:Orchid.Common.Object.TypeOf(System.Collections.IEnumerable,System.Type)">
            <summary>
            Returns the object if it is by the input type.
            Note: Dynamo elements may fail due to the existence of the 
            type "UnknownElement", in this case, use Element.TypeOf instead.
            </summary>
            <param name="object">An object.</param>
            <param name="type">Type as System.RuntimeType.</param>
            <returns name="Object">An object.</returns>
        </member>
        <member name="M:Orchid.Common.Scripting.DynamoPackagesPath">
            <summary>
            Get the path to the Dynamo package root folder.
            </summary>
            <returns name="string">Path.</returns>
        </member>
        <member name="M:Orchid.Common.Scripting.DynamoDefinitionsPath">
            <summary>
            Get the path to the Dynamo definition root folder.
            </summary>
            <returns name="string">Path.</returns>
        </member>
        <member name="M:Orchid.Common.Scripting.ScriptFileReader(System.String,System.String,System.Boolean)">
            <summary>
            Read 'script' file content, with refreshing option.
            Note: Do not send a list of paths and/or files as input!
            </summary>
            <param name="path">Path to file.</param>
            <param name="file">Filename including file extension.</param>
            <param name="refresh">Toggle true/false for refreshing!</param>
            <returns name="script">Script.</returns>
        </member>
        <member name="M:Orchid.Common.String.Contains(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Determines if the given string contains any of the given substrings.
            </summary>
            <param name="string">String to search in.</param>
            <param name="searchFor">List of substring to search for.</param>
            <param name="ignoreCase">Whether or not comparison takes case into account!?</param>
            <returns name="boolean">Whether the string contains any of the given substrings.</returns>
            <search>search,in,within,part of</search>
        </member>
        <member name="M:Orchid.Common.String.Replace(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Replaces all occurrences of text in a string with other text.
            </summary>
            <param name="string">String to replace substrings in.</param>
            <param name="searchFor">List of strings to be replaced.</param>
            <param name="replaceWith">List of strings to replace with.</param>
            <returns name="string">String with replacements made.</returns>
            <search>replace,overwrite,override,find and replace</search>
        </member>
        <member name="M:Orchid.Common.String.Substring(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves a substring from the given string. The substring starts at the
            given start string/character position and ends at the given string/character.
            </summary>
            <param name="string">String to take substring of.</param>
            <param name="startsWith">Substring to search the start for.</param>
            <param name="endsWith">Substring to search the end for.</param>
            <param name="ignoreCase">Whether or not comparison takes case into account!?</param>
            <returns name="substring">Substring made from the original string.</returns>
            <search>subset,get string,part,smaller string</search>
        </member>
        <member name="M:Orchid.Common.String.ToType(System.String)">
            <summary>
            Returns the type by string input.
            Note: Dynamo type "UnknownElement" cannot be returned as a type.
            </summary>
            <param name="string">A string.</param>
            <returns name="Type">Type as System.RuntimeType.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Definition.ToString">
            <summary>
            ElementFilter string override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitFamily.Definition.ByName(System.String)">
            <summary>
            Get parameter definition by name.
            </summary>
            <param name="name">The name of the shared parameter.</param>
            <returns name="Definition">The parameter definition.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Definition.ByParameter(Orchid.RevitFamily.Parameter)">
            <summary>
            Get parameter definition by parameter.
            </summary>
            <param name="parameter">Parameter as Dynamo type.</param>
            <returns name="Definition">The parameter definition.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Definition.GetExternal(System.String)">
            <summary>
            Get shared parameter definition by name from the current shared parameter file.
            </summary>
            <param name="name">The name of the shared parameter.</param>
            <returns name="Definition">The shared parameter definition.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Document.NewFamily(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Create new family by name.
            </summary>
            <param name="file">File(s), must be new project file name(s) incl. path.</param>
            <param name="template">Family template(s) incl. path.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Document.AddLookupTable(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Load lookup file by name.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="file">Lookup file (path) to load.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Document.GetCategory(Orchid.RevitProject.Common.Document)">
            <summary>
            Get the family document category.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Document.SetCategory(Orchid.RevitProject.Common.Document,Revit.Elements.Category)">
            <summary>
            Set the family document category.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="category">Gategory as string or Dynamo type.</param>
            <returns name="Category">Category as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Document.Parameters(Orchid.RevitProject.Common.Document)">
            <summary>
            Obtain all the Parameters from the family document, sorted by Name.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Document.SharedParameters(Orchid.RevitProject.Common.Document)">
            <summary>
            Obtain all the SharedParameters from the family document, sorted by Name.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Document.GetAssociated(Orchid.RevitProject.Common.Document)">
            <summary>
            Get family document parameter there has an associated element and its associated parameter.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="Parameter">Family document parameter as Orchid type.</returns>
            <returns name="Element">Associated element in the document as Dynamo type.</returns>
            <returns name="elementParameter">Associated element parameter in the document.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Family.GetNested(Orchid.RevitProject.Common.Document)">
            <summary>
            Get nested family in the familyDocument.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="Family">Family as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.PresetSharedParameters(Autodesk.Revit.DB.Document,System.String,System.Boolean)">
            <summary>
            Store current shared parameter file and set/use a temp file.
            </summary>
            <param name="document">Revit document.</param>
            <param name="file">Provided shared parameter file or null.</param>
            <param name="embedded">Use an embedded file?</param>
            <returns name = "SPfiles">List of currentSPfile and tempSPfile as strings.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.ResetSharedParameters(Autodesk.Revit.DB.Document,System.String,System.Boolean,System.String[])">
            <summary>
            reset to point of departure, apply old shared parameter file if changed.
            </summary>
            <param name="document">Revit document.</param>
            <param name="file">Provided shared parameter file or null.</param>
            <param name="embedded">Use an embedded file?</param>
            <param name="presetFiles">List of currentSPfile and tempSPfile as strings.</param>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.LoadParameter(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{System.String},System.Object,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="document"></param>
            <param name="parameterName"></param>
            <param name="typeCat">Type or Category input.</param>
            <param name="group"></param>
            <param name="tooltip"></param>
            <param name="instance"></param>
            <param name="reporting"></param>
            <param name="typeOrCategory">Boolean value for type (T) or category (F) input!</param>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.LoadSharedParameter(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="document"></param>
            <param name="parameterName"></param>
            <param name="groupName"></param>
            <param name="type"></param>
            <param name="group"></param>
            <param name="tooltip"></param>
            <param name="instance"></param>
            <param name="reporting"></param>
            <param name="create">Boolean value for create shared parameter!?</param>
            <returns></returns>
        </member>
        <member name="P:Orchid.RevitFamily.FamilyType.Name">
            <summary>
            Get the family type name.
            </summary>
            <returns name="string">Name as string.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.ToString">
            <summary>
            Implement ToString() method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.ToOrchidType(Autodesk.Revit.DB.FamilyType)">
            <summary>
            Convert Autodesk Revit family type to Orchid family type.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyType">FamilyType as Revit type.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Current">
            <summary>
            Get the current family type.
            Note: If no current family types exists, then a default 
            family type will be created named as the familyDocument.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Current(Orchid.RevitProject.Common.Document)">
            <summary>
            Get the current family type in the familyDocument. 
            Note: If no current family types exists, then a default 
            family type will be created named as the familyDocument.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.All">
            <summary>
            Get all family types.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.All(Orchid.RevitProject.Common.Document)">
            <summary>
            Get all family types in the familyDocument.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Create(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Create family type by name.
            Note: If no input to name is provided (default as null), then a default 
            family type will be created named as the familyDocument.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="name">The family type name.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.ByName(System.String)">
            <summary>
            Get family type by name in current document.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.ByName(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get family type by name.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="name">Name as string value.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Rename(Orchid.RevitProject.Common.Document,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Rename family type by name.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="sourceName">The name of the source family type.</param>
            <param name="targetName">The name of the target family type.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Delete(Orchid.RevitProject.Common.Document,Orchid.RevitFamily.FamilyType)">
            <summary>
            Delete family type by name.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="familyType">FamilyType as string or Revit type.</param>
            <returns name="boolean">Boolean value if family type is deleted (if family type existed).</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.GetNested(Orchid.RevitProject.Common.Document)">
            <summary>
            Get nested family type (FamilySymbol) in the family document.
            Note: Nested families in a family document and in a project
            document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="FamilyType">Nested family type (FamilySymbol) as Dynamo type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Formula.Get(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get family formula by parameter name.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter to get.</param>
            <returns name="Formula">Formula as string.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Formula.Set(Orchid.RevitProject.Common.Document,System.String,System.String)">
            <summary>
            Set family formula by parameter name.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter to set.</param>
            <param name="value">The value.</param>
            <returns name="Formula">Formula as string.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Formula.Remove(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Remove family formula value by name
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter to remove formula.</param>
            <returns name="boolean">Boolean value if formula is deleted (if formula existed).</returns>
        </member>
        <member name="P:Orchid.RevitFamily.Parameter.Name">
            <summary>
            Get family parameter name.
            </summary>
            <returns name="string">Name as string.</returns>
        </member>
        <member name="P:Orchid.RevitFamily.Parameter.Id">
            <summary>
            Family parameter Id as integer.
            </summary>
            <returns name="integer">Id as integer value.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.ToString">
            <summary>
            Family parameter string override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.ToOrchidType(Autodesk.Revit.DB.FamilyParameter)">
            <summary>
            Convert Autodesk Revit parameter to Orchid parameter.
            </summary>
            <param name="parameter">Parameter as Revit type.</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Create(Orchid.RevitProject.Common.Document,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create family parameter by name and by type.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter to add (create).</param>
            <param name="type">BuiltIn Parameter Type.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter?, otherwise it's a type parameter!</param>
            <param name="reporting">Is reporting parameter? 
            Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Create(Orchid.RevitProject.Common.Document,System.Collections.Generic.IEnumerable{System.String},Revit.Elements.Category,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create family parameter by name and by category.
            This is similar to the Revit type attachment &lt;Family Type&gt;.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter to add (create).</param>
            <param name="category">Category for the &lt;Family Type&gt; as Dynamo type.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter?, otherwise it's a type parameter!</param>
            <param name="reporting">Is reporting parameter? 
            Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.ById(System.Int32)">
            <summary>
            Get parameter by id in current document.
            </summary>
            <param name="id">Id as integer value.</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.ById(Orchid.RevitProject.Common.Document,System.Int32)">
            <summary>
            Get parameter by id.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="id">Id as integer value.</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.ByName(System.String)">
            <summary>
            Get parameter by name in current document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="FamilyType">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.ByName(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get parameter by name.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="name">Name as string value.</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.GetValue(Orchid.RevitProject.Common.Document,System.Collections.Generic.ICollection{Orchid.RevitFamily.FamilyType},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get family parameter value by parameter name
            Note: If no family type is provided (default as null), then will the
            default family type in the familyDocument be used. Furthermore, 
            If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="parameterName">The name of the parameter to get.</param>
            <returns name="valueByType">Value by familyType.</returns>
            <returns name="valueByParameter">Value by parameterName.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.SetValue(Orchid.RevitProject.Common.Document,System.Collections.Generic.ICollection{System.Object},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Set family parameter value by parameter name.
            Provided values must comply with the number of family types!
            Note: If no family type is provided (default as null), then will the
            default family type in the familyDocument be used. Furthermore, 
            If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="parameterName">The name of the parameter to set.</param>
            <param name="value">The value to set.</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Rename(Orchid.RevitProject.Common.Document,System.String,System.String)">
            <summary>
            Rename family parameter by parameter name.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="sourceName">The name of the source parameter.</param>
            <param name="targetName">The name of the target parameter.</param>
            <returns name="boolean">Boolean value if parameter is renamed (if parameter existed).</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Delete(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Delete family parameter by parameter name.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter to delete.</param>
            <returns name="boolean">Boolean value if parameter is deleted.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Convert(Orchid.RevitProject.Common.Document,Orchid.RevitFamily.Definition,System.Boolean)">
            <summary>
            Convert family parameter to shared parameter.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="definition">The shared parameter definition.</param>
            <param name="instance">Is instance parameter?, otherwise it's a type parameter!</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.IsReporting(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Verify if parameter is a reporting parameter.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter to verify.</param>
            <returns name="boolean">Boolean value if parameter is a reporting parameter.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Associate(Orchid.RevitProject.Common.Document,System.String,Revit.Elements.Element,System.String)">
            <summary>
            Associate document parameter with element parameter (e.g. nested family)  
            Note: An element to associate may be an internal geometry element in the family
            or a loaded nested family. The latter is denoted FamilySymbol and is the same
            as a FamilyType in a project document.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The family document parameter name to associate.</param>
            <param name="element">Element as Dynamo type to associate.</param>
            <param name="elementParameter">The element parameter name to associate.</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.GetAssociated(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Get associated element and its associated parameter by parameter name.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns name="Element">Associated element in the document as Dynamo type.</returns>
            <returns name="elementParameter">Associated element parameter in the document.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.HasAssociated(Orchid.RevitProject.Common.Document,System.String)">
            <summary>
            Verify if parameter has associated elements.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter to verify.</param>
            <returns name="boolean">Boolean value if parameter has associated elements.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.Create(Orchid.RevitProject.Common.Document,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create shared parameter by name in the family. 
            If the parameter not exists in the shared parameter file is it being created.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter to create.</param>
            <param name="groupName">The name of the group where the parameter belong to.</param>
            <param name="type">BuiltIn Parameter Type.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter!</param>
            <param name="reporting">Is reporting parameter? 
            Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.Add(Orchid.RevitProject.Common.Document,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add shared parameter by name, from current loaded shared parameter file.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="groupName">The name of the group where the parameter belong to.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter!</param>
            <param name="reporting">Is reporting parameter? 
            Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.AddByGroup(System.Collections.Generic.IEnumerable{Orchid.RevitProject.Common.Document},System.String[],System.String[],System.Boolean[],System.Boolean[])">
            <summary>
            Add shared parameter by groupName, from current loaded shared parameter file.
            Parameters are set with the same settings pr. provided group.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="groupName">Group of the parameter to add from the file. 
            If no group is supplied, all possible groups are selected.</param>
            <param name="group">BuiltIn Parameter Group to add pr. provided group.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter! 
            Boolean value must be set pr. provided group.</param>
            <param name="reporting">Is reporting parameter? Boolean value must be set pr. provided group. 
            Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
            <returns name="GroupName">List of group names.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.AddByFile(System.Collections.Generic.IEnumerable{Orchid.RevitProject.Common.Document},System.String,System.String[],System.String[],System.Boolean[],System.Boolean[])">
            <summary>
            Add shared parameter by groupName, by the provided shared parameter file. 
            Parameters are set with the same settings pr. provided group.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="file">Shared Parameter file incl. file extension.</param>
            <param name="groupName">Group of the parameter to add from the file. 
            If no group is supplied, all possible groups are selected.</param>
            <param name="group">BuiltIn Parameter Group to add pr. provided group.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter! 
            Boolean value must be set pr. provided group.</param>
            <param name="reporting">Is reporting parameter? Boolean value must be set pr. provided group. 
            Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
            <returns name="GroupName">List of group names.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.AddIFC(System.Collections.Generic.IEnumerable{Orchid.RevitProject.Common.Document})">
            <summary>
            Add basic IFC type and instance shared parameters in the family 
            (IfcExportAs, IfcExportType, IfcDescription, IFC CAD Layer).
            Parameters are set with the same settings pr. group.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.AddBIM7AA(System.Collections.Generic.IEnumerable{Orchid.RevitProject.Common.Document})">
            <summary>
            Add BIM7AA type shared parameters in the family (BIM7AATypeID, BIM7AATypeCode, 
            BIM7AATypeNumber, BIM7AATypeName, BIM7AATypeDescription, BIM7AATypeComments).
            Parameters are set with the same settings pr. group.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.AddCCS(System.Collections.Generic.IEnumerable{Orchid.RevitProject.Common.Document})">
            <summary>
            Add basic CCS type and instance shared parameters in the family.
            Parameters are set with the same settings pr. group.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.Convert(Orchid.RevitProject.Common.Document,System.String,System.Boolean)">
            <summary>
            Convert shared parameter to family parameter.
            </summary>
            <param name="familyDocument">Family document (rfa) as Orchid document.</param>
            <param name="parameterName">The name of the parameter to delete.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter!</param>
            <returns name="Parameter">Parameter as Orchid type.</returns>
        </member>
    </members>
</doc>
